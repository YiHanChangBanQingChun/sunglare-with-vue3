{"version":3,"file":"js/lu-jing-gui-hua-route.036f5e4c.js","mappings":"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","sources":["webpack://sun-glare-project/./src/views/RouteView.vue","webpack://sun-glare-project/./src/views/RouteView.vue?75e7"],"sourcesContent":["<template>\r\n  <!-- 输入了起点和终点之后,还没有摁查询路径的画面 -->\r\n  <div class=\"lu-jing-gui-hua\">\r\n    <!-- 搜索框 -->\r\n    <!-- 外层容器 -->\r\n    <div class=\"search-containers\">\r\n      <!-- 交换的侧边栏 -->\r\n      <div class=\"revert-containers\">\r\n        <div class=\"car\"><img src='@/assets/car.png'></div>\r\n        <div class=\"swap-action\">\r\n          <!-- 绑定 swap 方法到点击事件 -->\r\n          <button @click=\"swap\" title=\"切换起终点\">\r\n            <img :src=\"require('@/assets/revert.png')\" alt=\"\" class=\"revert\">\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- 搜索起点的容器 -->\r\n      <div class=\"search-container start\">\r\n        <!-- 图片 -->\r\n        <div class=\"search-icon-wrapper\">\r\n          <img src='@/assets/pink-circle.png' alt=\"pink\">\r\n        </div>\r\n        <!-- 输入框 -->\r\n        <input type=\"text\" v-model=\"searchQueryStart\" @input=\"onSearchInputChange($event, true)\" placeholder=\"请输入起点\" class=\"search-box search-box-start\"/>\r\n        <!-- 搜索框内部的删除图片 -->\r\n        <span class=\"search-box-img\">\r\n          <div class=\"delete\" title=\"清空\" @click=\"clc1\">\r\n            <img src='@/assets/cancel.png' alt=\"delete1\">\r\n          </div>\r\n        </span>\r\n        <!-- 起点搜索结果展示 -->\r\n        <div class=\"search-results\" v-if=\"searchResults.length && searchQueryStart\" ref=\"searchResultsStart\">\r\n    <ul>\r\n      <li v-for=\"(result, index) in searchResults\" :key=\"index\" :class=\"{ 'highlighted': index === highlightedIndex }\" @click=\"selectResult(result, true)\">\r\n        {{ result.name }}\r\n      </li>\r\n        </ul>\r\n        </div>\r\n    </div>\r\n      <!-- 搜索终点的容器 -->\r\n      <div class=\"search-container end\">\r\n        <!-- 图片容器 -->\r\n        <div class=\"search-icon-wrapper\">\r\n          <img src='@/assets/green-circle.png' alt=\"green\">\r\n        </div>\r\n        <!-- 输入框 -->\r\n        <input type=\"text\" v-model=\"searchQueryEnd\" @input=\"onSearchInputChange($event, false)\" placeholder=\"请输入终点\" class=\"search-box search-box-end\"/>\r\n         <!-- 搜索框内部的删除图片 -->\r\n        <span class=\"search-box-img\">\r\n          <div class=\"delete\" title=\"清空\" @click=\"clc2\">\r\n            <img src='@/assets/cancel.png' alt=\"delete1\">\r\n          </div>\r\n        </span>\r\n        <!-- 终点搜索结果展示 -->\r\n        <div class=\"search-results\" v-if=\"searchResultsEnd.length && searchQueryEnd\" ref=\"searchResultsEnd\">\r\n    <ul>\r\n      <li v-for=\"(result, index) in searchResultsEnd\" :key=\"index\" :class=\"{ 'highlighted': index === highlightedIndex }\" @click=\"selectResult(result, false)\">\r\n        {{ result.name }}\r\n      </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"search-action\" @click=\"onSearch\" title=\"搜索\">\r\n        <img :src=\"require('@/assets/search.png')\" alt=\"\" class=\"search\">\r\n      </div>\r\n    <!-- 新的覆盖层容器 -->\r\n    <div v-if=\"isLoading\" class=\"loader-overlay\">\r\n      <div class=\"loader\">\r\n      </div>\r\n    </div>\r\n    </div>\r\n  </div>\r\n  <!-- 地图展示 -->\r\n  <div id=\"viewDiv\"></div>\r\n  <div v-if=\"ismaploading\" class=\"maploader-overlay\">\r\n    <div class=\"maploader\">\r\n    </div>\r\n  </div>\r\n  <!-- 时间选择框和路径展示框 -->\r\n  <div class=\"main-container\">\r\n    <!-- 时间选择框 -->\r\n    <div class=\"choose-time\">\r\n      <div class=\"form-group\">\r\n        <label for=\"date-input\">选择日期：</label>\r\n        <input id=\"date-input\" type=\"date\" v-model=\"selectedDate\" :min=\"minDate\" :max=\"maxDate\" :class=\"{ 'invalid-date': isDateDisabled(selectedDate) }\" @change=\"handleDateChange\">\r\n        <label for=\"time-input\">选择时间：</label>\r\n        <input id=\"time-input\" type=\"time\" v-model=\"formattedTime\" @input=\"onTimeInputChange\" step=\"600\"> <!-- 600秒 = 10分钟 -->\r\n      </div>\r\n    </div>\r\n    <div>\r\n   <!-- 路线展示 -->\r\n   <transition name=\"fade\">\r\n      <div class=\"routelist\" v-show=\"isRouteListVisible\">\r\n        <ul class=\"cardlist\">\r\n          <div class=\"route\" data-index=\"1\" @click=\"highlightRoute('noGlareRouteId')\">\r\n            <div class=\"introduction\" :style=\"{ color: getColor(1) }\">无眩光路径</div>\r\n            <p class=\"intro\">\r\n              <span>用时：{{totalHours}}小时{{totalMinutes}}分钟</span> |\r\n              <!-- <span></span> -->\r\n              <span>路长：{{totalDistance}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n            <p class=\"intro\">\r\n              <span>途径：{{totalPass }}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n          </div>\r\n          <div class=\"route\" data-index=\"0\" @click=\"highlightRoute('defaultRouteId')\">\r\n            <div class=\"introduction\" :style=\"{ color: getColor(0) }\">常规路径</div>\r\n            <p class=\"intro\">\r\n              <span>用时：{{noGlareTotalHours}}小时{{noGlareTotalMinutes}}分钟</span> |\r\n              <!-- <span></span> -->\r\n              <span>路长：{{noGlareTotalDistance}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n            <p class=\"intro\">\r\n              <span>途径：{{noGlareTotalPass}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n          </div>\r\n        </ul>\r\n        <span class=\"toggle-button\" @click=\"toggleRouteList\" title=\"隐藏\">\r\n          <img src='@/assets/cancel.png' alt=\"delete1\">\r\n        </span>\r\n      </div>\r\n    </transition>\r\n    <button v-if=\"!isRouteListVisible\" @click=\"toggleRouteList\" class=\"open-button\">展开路线结果</button>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Map from '@geoscene/core/Map.js'\r\nimport MapView from '@geoscene/core/views/MapView.js'\r\nimport Graphic from '@geoscene/core/Graphic'\r\nimport Point from '@geoscene/core/geometry/Point.js'\r\nimport GraphicsLayer from '@geoscene/core/layers/GraphicsLayer'\r\nimport FeatureLayer from '@geoscene/core/layers/FeatureLayer'\r\nimport Extent from '@geoscene/core/geometry/Extent'\r\nimport axios from 'axios'\r\nimport { nextTick, markRaw } from 'vue'\r\nimport BasemapGallery from '@geoscene/core/widgets/BasemapGallery.js'\r\nimport Compass from '@geoscene/core/widgets/Compass.js'\r\nimport ScaleBar from '@geoscene/core/widgets/ScaleBar.js'\r\nimport DistanceMeasurement2D from '@geoscene/core/widgets/DistanceMeasurement2D.js'\r\nimport LayerList from '@geoscene/core/widgets/LayerList.js'\r\n\r\nexport default {\r\n  name: 'RouteView',\r\n  data () {\r\n    return {\r\n      searchQueryStart: '',\r\n      searchQueryEnd: '',\r\n      selectedResultStart: null,\r\n      selectedResultEnd: null,\r\n      searchResults: [],\r\n      searchResultsEnd: [],\r\n      isLoading: false,\r\n      ismaploading: false,\r\n      totalHours: 0,\r\n      totalMinutes: 0,\r\n      totalDistance: '0千米',\r\n      selectedDate: '', // 用户选择的日期\r\n      selectedTime: '', // 用户选择的时间\r\n      noGlareTotalHours: 0, // 无眩光路径的总时长（小时）\r\n      noGlareTotalMinutes: 0, // 无眩光路径的总时长（分钟）\r\n      highlightedIndex: -1, // 高亮的搜索结果索引\r\n      noGlareTotalDistance: '0千米', // 无眩光路径的总距离\r\n      highlightedRouteId: null, // 当前高亮显示的路径ID\r\n      routeLayers: {}, // 存储路径的FeatureLayer实例\r\n      // 闪烁路径的相关数据\r\n      blinkingTimers: {}, // 存储每条路径的闪烁定时器 ID\r\n      highlightedColor: [0, 123, 255, 1], // 浅蓝色，完全不透明\r\n      highlightedBlinkColor: [0, 123, 255, 0.2], // 浅蓝色，半透明\r\n      noGlareColor: [244, 96, 108], // 无眩光路径为红色\r\n      defaultColor: [25, 202, 173], // 常规路径为绿色\r\n      noGlareRouteId: 'noGlareRouteId',\r\n      defaultRouteId: 'defaultRouteId',\r\n      isRouteListVisible: true, // 路线列表是否可见\r\n      totalPass: '',\r\n      noGlareTotalPass: '',\r\n      BasemapName: null\r\n    }\r\n  },\r\n  // 在组件挂载时初始化地图\r\n  mounted () {\r\n    this.parseUrlParams()\r\n    this.initMap()\r\n    if (this.$route.query.start && this.$route.query.end) {\r\n      this.selectedResultStart = JSON.parse(this.$route.query.start)\r\n      this.selectedResultEnd = JSON.parse(this.$route.query.end)\r\n    }\r\n    // this.parseUrlParams()\r\n    // 设置定时器，每隔1分钟更新时间\r\n    window.addEventListener('keydown', this.handleKeydown)\r\n  },\r\n  beforeUnmount () {\r\n    window.removeEventListener('keydown', this.handleKeydown)\r\n  },\r\n  computed: {\r\n    minDate () {\r\n      return '2024-01-01'\r\n    },\r\n    maxDate () {\r\n      return '2024-12-31'\r\n    },\r\n    formattedTime () {\r\n      // 格式化时间为10分钟间隔\r\n      if (!this.selectedTime) return ''\r\n      const [hours, minutes] = this.selectedTime.split(':').map(Number)\r\n      const roundedMinutes = Math.floor(minutes / 10) * 10\r\n      return `${String(hours).padStart(2, '0')}:${String(roundedMinutes).padStart(2, '0')}`\r\n    }\r\n  },\r\n  methods: {\r\n    toggleRouteList () {\r\n      this.isRouteListVisible = !this.isRouteListVisible\r\n    },\r\n    // 获取颜色\r\n    getColor (index) {\r\n      if (index === 0) {\r\n        return 'rgb(25, 202, 173)' // 绿色，耗时少路径\r\n      } else if (index === 1) {\r\n        return 'rgb(244, 96, 108)' // 红色，无眩光路径\r\n      }\r\n      return 'black' // 默认颜色\r\n    },\r\n\r\n    // 绘制路径\r\n    highlightRoute (routeId) {\r\n      // console.log('用户点击了路径:', routeId)\r\n      routeId = routeId === 'defaultRouteId' ? 'noGlareRouteId' : 'defaultRouteId'\r\n      // 如果之前有高亮的路径且不是当前点击的路径，重置其样式\r\n      if (this.highlightedRouteId && this.highlightedRouteId !== routeId) {\r\n        this.resetRouteStyle(this.highlightedRouteId)\r\n      }\r\n\r\n      // 如果当前点击的路径已经在闪烁中，先停止闪烁\r\n      if (this.blinkingTimers[routeId]) {\r\n        clearInterval(this.blinkingTimers[routeId])\r\n        delete this.blinkingTimers[routeId]\r\n        this.resetRouteStyle(routeId)\r\n      }\r\n\r\n      // 只更新被点击的路径的渲染器样式\r\n      const layer = this.routeLayers[routeId]\r\n      if (layer) {\r\n        const color = this.highlightedColor\r\n        const newRenderer = {\r\n          type: 'simple',\r\n          title: '路径',\r\n          symbol: {\r\n            type: 'simple-line',\r\n            color: color,\r\n            width: 5\r\n          }\r\n        }\r\n        layer.renderer = newRenderer\r\n      }\r\n\r\n      // 更新高亮路径 ID\r\n      this.highlightedRouteId = routeId\r\n      // 启动闪烁效果\r\n      this.startBlinking(routeId)\r\n    },\r\n\r\n    // 开始闪烁\r\n    startBlinking (routeId) {\r\n      const layer = this.routeLayers[routeId]\r\n      if (!layer) return\r\n\r\n      let isBlinkOn = false\r\n      const originalColor = routeId === this.noGlareRouteId ? this.noGlareColor : this.defaultColor\r\n\r\n      // 每隔300毫秒切换一次透明度\r\n      const intervalId = setInterval(() => {\r\n        isBlinkOn = !isBlinkOn\r\n        const color = isBlinkOn ? this.highlightedColor : this.highlightedBlinkColor\r\n\r\n        // 更新渲染器以实现闪烁效果\r\n        const newRenderer = {\r\n          type: 'simple',\r\n          title: '路径',\r\n          symbol: {\r\n            type: 'simple-line',\r\n            color: color,\r\n            width: 4.5\r\n          }\r\n        }\r\n        layer.renderer = newRenderer\r\n      }, 300)\r\n\r\n      // 存储定时器 ID\r\n      this.blinkingTimers[routeId] = intervalId\r\n\r\n      // 三秒后停止闪烁并恢复原始颜色\r\n      setTimeout(() => {\r\n        clearInterval(this.blinkingTimers[routeId])\r\n        delete this.blinkingTimers[routeId]\r\n\r\n        // 恢复原始颜色\r\n        const finalRenderer = {\r\n          type: 'simple',\r\n          title: '路径',\r\n          symbol: {\r\n            type: 'simple-line',\r\n            color: this.highlightedColor, // 固定为完全不透明的浅蓝色\r\n            width: 4.5\r\n          }\r\n        }\r\n        layer.renderer = finalRenderer\r\n\r\n        // 三秒后恢复为原始颜色\r\n        setTimeout(() => {\r\n          this.resetRouteStyle(routeId, originalColor)\r\n        }, 3000)\r\n      }, 3000) // 闪烁三秒\r\n    },\r\n    resetRouteStyle (routeId, originalColor = null) {\r\n      // 清除任何现有的闪烁定时器\r\n      if (this.blinkingTimers[routeId]) {\r\n        clearInterval(this.blinkingTimers[routeId])\r\n        delete this.blinkingTimers[routeId]\r\n      }\r\n\r\n      // 重置路径样式为原始颜色或默认颜色\r\n      const layer = this.routeLayers[routeId]\r\n      if (layer) {\r\n        const isNoGlare = routeId === this.noGlareRouteId\r\n        // const color = (isNoGlare ? this.noGlareColor : this.defaultColor)\r\n        const color = (isNoGlare ? this.defaultColor : this.noGlareColor)\r\n        const newRenderer = {\r\n          type: 'simple',\r\n          title: '路径',\r\n          symbol: {\r\n            type: 'simple-line',\r\n            color: color,\r\n            width: isNoGlare ? 4.5 : 3\r\n          }\r\n        }\r\n        layer.renderer = newRenderer\r\n      }\r\n    },\r\n    // 绘制路径\r\n    onTimeInputChange (event) {\r\n      const value = event.target.value\r\n      const [hours, minutes] = value.split(':').map(Number)\r\n      const roundedMinutes = Math.floor(minutes / 10) * 10\r\n      this.selectedTime = `${String(hours).padStart(2, '0')}:${String(roundedMinutes).padStart(2, '0')}`\r\n    },\r\n    // 判断日期是否可用\r\n    isDateDisabled (date) {\r\n      if (!date) return false\r\n      const selected = new Date(date)\r\n      const month = selected.getMonth() + 1 // 月份从0开始\r\n      const day = selected.getDate()\r\n      if (month >= 1 && month <= 7 && day !== 15) {\r\n        return true\r\n      }\r\n      if (month === 8 && day <= 25) {\r\n        return true\r\n      }\r\n      if ((month === 10 || month === 12) && day !== 15) {\r\n        return true\r\n      }\r\n      if (month === 11 && day >= 9) {\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    // 处理日期变化\r\n    handleDateChange (event) {\r\n      const date = event.target.value\r\n      if (this.isDateDisabled(date)) {\r\n        // alert('选择的日期未进行模拟，请选择其他日期。可选日期为，1-7月的15日，8月20日-9月30日，10-12月的15日。')\r\n        alert('抱歉，选择的日期未进行模拟，请选择其他日期。可选日期为，9月1日-9月30日，11月1日到9日，以及其他月份的15日.')\r\n        this.selectedDate = ''\r\n      }\r\n    },\r\n    // 处理键盘事件\r\n    handleKeydown (event) {\r\n      if (this.searchResults.length && this.searchQueryStart) {\r\n        switch (event.key) {\r\n          case 'Escape':\r\n            this.searchResults = []\r\n            break\r\n          case 'Tab':\r\n            event.preventDefault()\r\n            this.highlightedIndex = (this.highlightedIndex + 1) % this.searchResults.length\r\n            nextTick(() => {\r\n              const highlightedElement = this.$refs.searchResultsStart.querySelector('li.highlighted')\r\n              if (highlightedElement) {\r\n                highlightedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' })\r\n              }\r\n            })\r\n            break\r\n          case 'Enter':\r\n            if (this.highlightedIndex >= 0 && this.highlightedIndex < this.searchResults.length) {\r\n              this.selectResult(this.searchResults[this.highlightedIndex], true)\r\n            }\r\n            break\r\n        }\r\n      } else if (this.searchResultsEnd.length && this.searchQueryEnd) {\r\n        switch (event.key) {\r\n          case 'Escape':\r\n            this.searchResultsEnd = []\r\n            break\r\n          case 'Tab':\r\n            event.preventDefault()\r\n            this.highlightedIndex = (this.highlightedIndex + 1) % this.searchResultsEnd.length\r\n            nextTick(() => {\r\n              const highlightedElement = this.$refs.searchResultsEnd.querySelector('li.highlighted')\r\n              if (highlightedElement) {\r\n                highlightedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' })\r\n              }\r\n            })\r\n            break\r\n          case 'Enter':\r\n            if (this.highlightedIndex >= 0 && this.highlightedIndex < this.searchResultsEnd.length) {\r\n              this.selectResult(this.searchResultsEnd[this.highlightedIndex], false)\r\n            }\r\n            break\r\n        }\r\n      }\r\n    },\r\n    // 更新时间，日期\r\n    updateTime () {\r\n      const now = new Date()\r\n      const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`\r\n      // 只有当 selectedTime 是当前时间时，才更新\r\n      if (!this.isTimeFromUrl || this.selectedTime === currentTime) {\r\n        this.selectedTime = currentTime\r\n        this.isTimeFromUrl = false // 重置标志位\r\n      }\r\n    },\r\n    // 清空搜索框\r\n    clc1 () {\r\n      // 清空搜索框1\r\n      this.searchQueryStart = ''\r\n    },\r\n    // 清空搜索框2\r\n    clc2 () {\r\n      this.searchQueryEnd = ''\r\n    },\r\n    // 交换起点和终点\r\n    swap () {\r\n      this.isSwapping = true // 设置标志位\r\n      // 交换 searchQueryStart 和 searchQueryEnd\r\n      const tempQuery = this.searchQueryStart\r\n      this.searchQueryStart = this.searchQueryEnd\r\n      this.searchQueryEnd = tempQuery\r\n      // 交换 selectedResultStart 和 selectedResultEnd\r\n      const tempResult = this.selectedResultStart\r\n      this.selectedResultStart = this.selectedResultEnd\r\n      this.selectedResultEnd = tempResult\r\n      // 调用 onSearch 方法重新查询路径\r\n      this.onSearch().then(() => {\r\n        this.parseUrlParams()\r\n        this.initMap(this.BasemapName) // 传递当前的底图名称\r\n        console.log(this.BasemapName)\r\n        // 确保在交换操作完成后，更新搜索框的值\r\n        this.searchQueryStart = this.selectedResultStart.name\r\n        this.searchQueryEnd = this.selectedResultEnd.name\r\n        // 更新底图\r\n        this.handleBasemapChange({ title: this.BasemapName })\r\n        this.isSwapping = false // 重置标志位\r\n      }).catch(() => {\r\n        this.isSwapping = false // 确保在错误情况下也重置标志位\r\n      })\r\n    },\r\n    // 解析URL参数\r\n    parseUrlParams () {\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      const startParam = urlParams.get('start')\r\n      const endParam = urlParams.get('end')\r\n      const dateParam = urlParams.get('date')\r\n      const timeParam = urlParams.get('time')\r\n      const defaultRouteIdParam = urlParams.get('default_id')\r\n      const timeBasedRouteIdParam = urlParams.get('time_based_id')\r\n      if (startParam) {\r\n        try {\r\n          const startObj = JSON.parse(decodeURIComponent(startParam))\r\n          if (startObj && startObj.address) {\r\n            this.searchQueryStart = startObj.name\r\n          }\r\n        } catch (e) {\r\n          console.error('Error parsing start parameter:', e)\r\n        }\r\n      }\r\n      if (endParam) { // 如果有终点参数，进行解析\r\n        try {\r\n          const endObj = JSON.parse(decodeURIComponent(endParam))\r\n          if (endObj && endObj.address) {\r\n            this.searchQueryEnd = endObj.name // 绑定终点查询字符串\r\n          }\r\n        } catch (e) {\r\n          console.error('Error parsing end parameter:', e)\r\n        }\r\n      }\r\n      // 如果有日期参数，进行解析\r\n      if (dateParam) {\r\n        this.selectedDate = dateParam\r\n      }\r\n      // 如果有时间参数，进行解析\r\n      if (timeParam) {\r\n        this.selectedTime = timeParam\r\n        this.isTimeFromUrl = true // 设置标志位\r\n      }\r\n      // 如果有默认路径ID参数，进行解析\r\n      if (defaultRouteIdParam) {\r\n        this.defaultRouteId = defaultRouteIdParam\r\n      }\r\n      // 如果有基于时间的路径ID参数，进行解析\r\n      if (timeBasedRouteIdParam) {\r\n        this.timeBasedRouteId = timeBasedRouteIdParam\r\n      }\r\n      // 如果有底图参数，进行解析\r\n      this.created()\r\n    },\r\n    // 处理搜索框输入变化事件\r\n    onSearchInputChange (event, isStart) {\r\n      const query = event.target.value\r\n      const searchResultsField = isStart ? 'searchResults' : 'searchResultsEnd'\r\n      if (query.includes(\"'\")) {\r\n        console.log('输入法临时输入，不发送请求')\r\n        return\r\n      }\r\n      if (query.length >= 2) {\r\n        fetch(`${process.env.VUE_APP_API_URL}/api/search`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ searchQueryStart: query })\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            this[searchResultsField] = data\r\n          })\r\n          .catch((error) => {\r\n            console.error('错误:', error)\r\n          })\r\n      } else {\r\n        this[searchResultsField] = []\r\n      }\r\n    },\r\n    // 处理选择搜索结果事件\r\n    selectResult (result, isStart = true) {\r\n      console.log('用户选择了搜索结果:', result)\r\n      const simplifiedResult = {\r\n        name: result.name,\r\n        address: result.address,\r\n        wgs84_latitude: result.wgs84_latitude,\r\n        wgs84_longitude: result.wgs84_longitude,\r\n        location: [result.wgs84_longitude, result.wgs84_latitude],\r\n        baidu_index: result.baidu_index,\r\n        baidu_latitude: result.baidu_latitude,\r\n        baidu_longitude: result.baidu_longitude,\r\n        id: result.id,\r\n        label: result.label\r\n      }\r\n      // 获取当前的起点和终点信息\r\n      let currentStart = this.selectedResultStart ? JSON.stringify(this.selectedResultStart) : null\r\n      let currentEnd = this.selectedResultEnd ? JSON.stringify(this.selectedResultEnd) : null\r\n      // 根据isStart参数选择起点或终点\r\n      if (isStart) {\r\n        this.selectedResultStart = simplifiedResult\r\n        this.searchQueryStart = simplifiedResult.name\r\n        this.searchResults = []\r\n        currentStart = JSON.stringify(simplifiedResult)\r\n      } else {\r\n        this.selectedResultEnd = simplifiedResult\r\n        this.searchQueryEnd = simplifiedResult.name\r\n        this.searchResultsEnd = []\r\n        currentEnd = JSON.stringify(simplifiedResult)\r\n      }\r\n      // 跳转到结果页面，带上起点和终点信息，并添加一个时间戳作为唯一查询参数\r\n      this.$router.push({\r\n        path: '/lu-jing-gui-hua/Intermediate-page',\r\n        query: {\r\n          start: currentStart,\r\n          end: currentEnd,\r\n          date: this.selectedDate,\r\n          time: this.selectedTime,\r\n          BasemapLayer: this.BasemapName\r\n        }\r\n      })\r\n    },\r\n    onSearch () {\r\n      return new Promise((resolve, reject) => {\r\n        // 检查是否两个结果都已选择\r\n        if (this.selectedResultStart && this.selectedResultEnd) {\r\n          // 显示加载动画\r\n          this.isLoading = true\r\n          // 构造包含location属性的起点和终点对象\r\n          const startWithLocation = {\r\n            ...this.selectedResultStart,\r\n            location: [this.selectedResultStart.wgs84_longitude, this.selectedResultStart.wgs84_latitude]\r\n          }\r\n          const endWithLocation = {\r\n            ...this.selectedResultEnd,\r\n            location: [this.selectedResultEnd.wgs84_longitude, this.selectedResultEnd.wgs84_latitude]\r\n          }\r\n          const formattedTime = this.selectedTime.length === 5 ? `${this.selectedTime}:00` : this.selectedTime\r\n          console.log('Formatted Time:', formattedTime) // 打印时间参数\r\n          // 发送请求到后端进行路径规划\r\n          axios.post(`${process.env.VUE_APP_API_URL}/api/route/plan`, { start: startWithLocation, end: endWithLocation, date: this.selectedDate, time: formattedTime })\r\n            .then(response => {\r\n              // 后端返回的路径规划结果ID\r\n              const defaultRoutePlanId = response.data.default_id\r\n              const timeBasedRoutePlanId = response.data.time_based_id\r\n              console.log('默认路径规划结果ID:', defaultRoutePlanId)\r\n              console.log('基于时间的路径规划结果ID:', timeBasedRoutePlanId)\r\n              console.log('路径规划成功，时间日期是:', this.selectedDate, this.selectedTime)\r\n              // 隐藏加载动画\r\n              this.isLoading = false\r\n              // 使用Vue Router跳转到结果页面，并传递路径规划结果ID\r\n              this.$router.push({\r\n                path: '/lu-jing-gui-hua/route',\r\n                query: {\r\n                  start: JSON.stringify(startWithLocation),\r\n                  end: JSON.stringify(endWithLocation),\r\n                  default_id: defaultRoutePlanId,\r\n                  time_based_id: timeBasedRoutePlanId,\r\n                  date: this.selectedDate,\r\n                  time: formattedTime,\r\n                  BasemapLayer: this.BasemapName\r\n                }\r\n              })\r\n              // if (!this.isSwapping) { // 如果不是交换操作，更新搜索框的值\r\n              this.searchQueryStart = startWithLocation.name\r\n              this.searchQueryEnd = endWithLocation.name\r\n              // }\r\n              resolve()\r\n            })\r\n            .catch(error => {\r\n              console.error(error)\r\n              // 隐藏加载动画\r\n              this.isLoading = false\r\n              // 错误处理，例如显示提示信息\r\n              alert('路径规划失败，请稍后再试。')\r\n              reject(error)\r\n            })\r\n        } else {\r\n          // 如果起点或终点未选择，显示提示信息\r\n          alert('请确保起点和终点都已选择。')\r\n          reject(new Error('请确保起点和终点都已选择。'))\r\n        }\r\n      })\r\n    },\r\n    // 初始化地图\r\n    initMap (basemapName) {\r\n      const map = new Map({\r\n        // basemap: 'tianditu-vector' // 使用适合的底图\r\n        // basemap: this.BasemapName || 'tianditu-vector' // 使用适合的底图\r\n        basemap: basemapName || this.BasemapName || 'tianditu-vector' // 使用适合的底图\r\n      })\r\n      this.map = map\r\n      // console.log('当前底图名称:', this.BasemapName, basemapName)\r\n      this.view = new MapView({\r\n        container: 'viewDiv', // 使用正确的容器ID\r\n        map: map,\r\n        center: [114.3, 30.7], // 默认中心点坐标\r\n        zoom: 4, // 默认缩放级别\r\n        constraints: {\r\n          geometry: {\r\n            type: 'extent',\r\n            xmin: 113.6,\r\n            ymin: 29.9,\r\n            xmax: 115.0,\r\n            ymax: 31.3\r\n          },\r\n          minScale: 500,\r\n          maxScale: 2000000,\r\n          rotationEnabled: false,\r\n          // 假设tileInfo.lods已经在某处定义，否则这里需要调整\r\n          // lods: tileInfo.lods,\r\n          snapToZoom: false\r\n        }\r\n      })\r\n      // 创建 BasemapGallery 实例\r\n      const basemapGallery = new BasemapGallery({\r\n        view: this.view,\r\n        source: {\r\n          query: {\r\n            title: '\"Basemaps for Developers\" AND owner:geoscenedev'\r\n          }\r\n        }\r\n      })\r\n      // 监听底图选择事件\r\n      basemapGallery.watch('activeBasemap', (newBasemap) => {\r\n        this.handleBasemapChange(newBasemap)\r\n      })\r\n      const compass = new Compass({\r\n        view: this.view\r\n      })\r\n      // 创建 ScaleBar 实例\r\n      const scaleBar = new ScaleBar({\r\n        view: this.view,\r\n        unit: 'metric', // 使用公制单位\r\n        style: 'ruler' // 使用标尺样式\r\n      })\r\n      // 创建 DistanceMeasurement2D 实例\r\n      const distanceMeasurement2D = new DistanceMeasurement2D({\r\n        view: this.view,\r\n        unit: 'metric',\r\n        unitOptions: {\r\n          metric: ['kilometers', 'meters'],\r\n          nonMetric: ['miles', 'feet']\r\n        },\r\n        iconClass: 'esri-icon-measure-line' // 设置图标类\r\n      })\r\n      // 创建 LayerList 实例\r\n      const layerList = new LayerList({\r\n        view: this.view\r\n      })\r\n      // 将 DistanceMeasurement2D 添加到地图视图的左下角\r\n      this.view.ui.add(distanceMeasurement2D, {\r\n        position: 'bottom-leading',\r\n        index: 0 // 确保它在最上面\r\n      })\r\n      // 将 BasemapGallery 添加到地图视图的右下角\r\n      this.view.ui.add(basemapGallery, {\r\n        position: 'bottom-right',\r\n        index: 0\r\n      })\r\n      // 将 LayerList 添加到地图视图的右下角\r\n      this.view.ui.add(layerList, {\r\n        position: 'bottom-right',\r\n        index: 1\r\n      })\r\n      // 移动缩放控件到左下角\r\n      this.view.ui.move('zoom', {\r\n        position: 'bottom-left',\r\n        index: 1\r\n      })\r\n      // 将指南针添加到地图视图的左下角\r\n      this.view.ui.add(compass, {\r\n        position: 'bottom-left',\r\n        index: 2\r\n      })\r\n      // 将 ScaleBar 添加到地图视图的左下角\r\n      this.view.ui.add(scaleBar, {\r\n        position: 'bottom-left',\r\n        index: 3\r\n      })\r\n\r\n      // 创建一个新的GraphicsLayer实例，以便在地图上绘制点\r\n      const graphicsLayer = new GraphicsLayer(\r\n        {\r\n          title: '起点与终点'\r\n        }\r\n      )\r\n      map.add(graphicsLayer)\r\n\r\n      // 创建 FeatureLayer 实例\r\n      const featureLayer = new FeatureLayer({\r\n        url: 'https://www.geosceneonline.cn/server/rest/services/Hosted/wuhan_village/FeatureServer',\r\n        title: '武汉县区面', // 设置图层名称\r\n        renderer: {\r\n          type: 'simple', // 使用简单渲染器\r\n          title: '县区边界',\r\n          symbol: {\r\n            type: 'simple-fill', // 使用简单填充符号\r\n            color: [0, 0, 0, 0], // 填充颜色透明\r\n            outline: {\r\n              color: [0, 0, 0, 1], // 轮廓颜色红色\r\n              width: 1\r\n            }\r\n          }\r\n        },\r\n        popupTemplate: {\r\n          content: [{\r\n            type: 'fields',\r\n            fieldInfos: [{\r\n              fieldName: '县区name',\r\n              label: '县区名称'\r\n            }]\r\n          }]\r\n        }\r\n      })\r\n      // 将 FeatureLayer 添加到地图\r\n      map.add(featureLayer)\r\n      map.add(graphicsLayer)\r\n\r\n      this.view.when(() => {\r\n        this.drawPoints(graphicsLayer)\r\n        this.adjustView()\r\n        this.drawRoutes(map)\r\n      }).catch((err) => {\r\n        console.error('MapView initialization error:', err)\r\n      })\r\n    },\r\n    // 处理底图选择\r\n    handleBasemapChange (basemap) {\r\n      const basemapMapping = {\r\n        '天地图-矢量（球面墨卡托投影）': 'tianditu-vector',\r\n        '天地图-影像（球面墨卡托投影）': 'tianditu-image',\r\n        '天地图-地形（球面墨卡托投影）': 'tianditu-topography'\r\n      }\r\n      // 检查 basemap.title 是否是中文\r\n      if (basemapMapping[basemap.title]) {\r\n        this.BasemapName = basemapMapping[basemap.title]\r\n      } else {\r\n        this.BasemapName = basemap.title\r\n      }\r\n      console.log('Basemap changed:', this.BasemapName)\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      urlParams.set('BasemapLayer', this.BasemapName)\r\n      window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\r\n    },\r\n    created () {\r\n      const BasemapLayer = this.$route.query.BasemapLayer\r\n      const basemapMapping = {\r\n        '天地图-矢量（球面墨卡托投影）': 'tianditu-vector',\r\n        '天地图-影像（球面墨卡托投影）': 'tianditu-image',\r\n        '天地图-地形（球面墨卡托投影）': 'tianditu-topography'\r\n      }\r\n\r\n      // 如果有底图参数，进行解析\r\n      if (BasemapLayer) {\r\n        // 检查 BasemapLayer 是否是中文\r\n        if (basemapMapping[BasemapLayer]) {\r\n          this.BasemapName = basemapMapping[BasemapLayer]\r\n        } else {\r\n          this.BasemapName = BasemapLayer\r\n        }\r\n      }\r\n      console.log('BasemapLayer is update', this.BasemapName)\r\n    },\r\n    // 调整视图以适应起点和终点\r\n    adjustView () {\r\n      if (this.selectedResultStart && this.selectedResultEnd) {\r\n        const padding = 0.01 // 调整这个值以增加或减少边界的放宽程度\r\n        const extent = new Extent({\r\n          xmin: Math.min(this.selectedResultStart.location[0], this.selectedResultEnd.location[0]) - 10 * padding,\r\n          ymin: Math.min(this.selectedResultStart.location[1], this.selectedResultEnd.location[1]) - 10 * padding,\r\n          xmax: Math.max(this.selectedResultStart.location[0], this.selectedResultEnd.location[0]) + 10 * padding,\r\n          ymax: Math.max(this.selectedResultStart.location[1], this.selectedResultEnd.location[1]) + 10 * padding\r\n        })\r\n        this.view.goTo(extent).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      } else if (this.selectedResultStart) {\r\n        this.view.goTo({\r\n          center: [this.selectedResultStart.location[0], this.selectedResultStart.location[1]],\r\n          zoom: 10\r\n        }).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      } else if (this.selectedResultEnd) {\r\n        this.view.goTo({\r\n          center: [this.selectedResultEnd.location[0], this.selectedResultEnd.location[1]],\r\n          zoom: 10\r\n        }).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      }\r\n    },\r\n    // 绘制起点和终点\r\n    drawPoints (graphicsLayer) {\r\n      // 检查this.$route.query.start和this.$route.query.end是否定义\r\n      if (!this.$route.query.start || !this.$route.query.end) {\r\n        console.error('Start or end point is undefined.')\r\n        return // 如果未定义，直接返回\r\n      }\r\n      const start = JSON.parse(this.$route.query.start)\r\n      const end = JSON.parse(this.$route.query.end)\r\n      // 检查start和end是否有location属性\r\n      if (!start.location || !end.location) {\r\n        console.error('Start or end point does not have a location.')\r\n        return // 如果没有location属性，直接返回\r\n      }\r\n      // 创建起点和终点的Point对象\r\n      const startPoint = new Point({\r\n        longitude: start.location[0],\r\n        latitude: start.location[1]\r\n      })\r\n      const endPoint = new Point({\r\n        longitude: end.location[0],\r\n        latitude: end.location[1]\r\n      })\r\n      const startGraphic = new Graphic({\r\n        geometry: startPoint,\r\n        title: '起点',\r\n        symbol: {\r\n          type: 'simple-marker', // autocasts as new SimpleMarkerSymbol()\r\n          color: 'red',\r\n          size: '20px'\r\n        },\r\n        // 添加popupTemplate\r\n        popupTemplate: {\r\n          title: '起点信息',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [\r\n                {\r\n                  fieldName: 'address',\r\n                  label: '地址'\r\n                },\r\n                {\r\n                  fieldName: 'name',\r\n                  label: '名称'\r\n                },\r\n                // 可以继续添加更多字段\r\n                {\r\n                  fieldName: 'wgs84_latitude',\r\n                  label: 'WGS84纬度'\r\n                },\r\n                {\r\n                  fieldName: 'wgs84_longitude',\r\n                  label: 'WGS84经度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_index',\r\n                  label: '百度索引'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_latitude',\r\n                  label: '百度纬度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_longitude',\r\n                  label: '百度经度'\r\n                },\r\n                {\r\n                  fieldName: 'id',\r\n                  label: 'ID'\r\n                },\r\n                {\r\n                  fieldName: 'label',\r\n                  label: '标签'\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        attributes: start\r\n      })\r\n      const endGraphic = new Graphic({\r\n        geometry: endPoint,\r\n        title: '终点',\r\n        symbol: {\r\n          type: 'simple-marker',\r\n          color: 'green',\r\n          size: '20px'\r\n        },\r\n        // 添加popupTemplate\r\n        popupTemplate: {\r\n          title: '终点信息',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [\r\n                {\r\n                  fieldName: 'address',\r\n                  label: '地址'\r\n                },\r\n                {\r\n                  fieldName: 'name',\r\n                  label: '名称'\r\n                },\r\n                // 可以继续添加更多字段\r\n                {\r\n                  fieldName: 'wgs84_latitude',\r\n                  label: 'WGS84纬度'\r\n                },\r\n                {\r\n                  fieldName: 'wgs84_longitude',\r\n                  label: 'WGS84经度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_index',\r\n                  label: '百度索引'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_latitude',\r\n                  label: '百度纬度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_longitude',\r\n                  label: '百度经度'\r\n                },\r\n                {\r\n                  fieldName: 'id',\r\n                  label: 'ID'\r\n                },\r\n                {\r\n                  fieldName: 'label',\r\n                  label: '标签'\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        attributes: end\r\n      })\r\n      // 将起点和终点添加到图形图层\r\n      graphicsLayer.addMany([startGraphic, endGraphic])\r\n    },\r\n    drawRoutes (map) {\r\n      const defaultRouteId = this.$route.query.default_id // 从URL获取默认路线ID\r\n      const timeBasedRouteId = this.$route.query.time_based_id // 从URL获取基于时间的路线ID\r\n\r\n      if (!defaultRouteId && !timeBasedRouteId) {\r\n        console.error('Route IDs are undefined.')\r\n        return\r\n      }\r\n\r\n      // 获取并绘制默认路径\r\n      if (defaultRouteId) {\r\n        this.fetchAndDrawRoute(map, defaultRouteId, [25, 202, 173], true) // 绿色，耗时少路径\r\n      }\r\n\r\n      // 获取并绘制基于时间的路径\r\n      if (timeBasedRouteId) {\r\n        this.fetchAndDrawRoute(map, timeBasedRouteId, [244, 96, 108]) // 红色，无眩光路径\r\n      }\r\n    },\r\n    fetchAndDrawRoute (map, routeId, color, isNoGlareRoute = false) {\r\n      const geojsonUrl = `${process.env.VUE_APP_API_URL}/api/get_geojson/${routeId}`\r\n      fetch(geojsonUrl) // 使用fetch API获取GeoJSON文件\r\n        .then(response => response.json()) // 将响应转换为JSON\r\n        .then(data => {\r\n          let totalLength = 0\r\n          let totalCost = 0\r\n          // const passRoads = []\r\n          // const roadNamesSet = new Set()\r\n          const roadLengths = {}\r\n\r\n          const features = data.features.map((feature, index) => {\r\n            if (feature.properties.cost !== 99999) {\r\n              totalLength += feature.properties.length\r\n              totalCost += feature.properties.cost\r\n            }\r\n\r\n            // if (!feature.properties.name.includes('未知') && !roadNamesSet.has(feature.properties.name)) {\r\n            //   roadNamesSet.add(feature.properties.name)\r\n            //   passRoads.push({\r\n            //     name: feature.properties.name,\r\n            //     length: feature.properties.length\r\n            //   })\r\n            // }\r\n\r\n            if (!feature.properties.name.includes('未知')) {\r\n              if (!roadLengths[feature.properties.name]) {\r\n                roadLengths[feature.properties.name] = { length: 0, order: index }\r\n              }\r\n              roadLengths[feature.properties.name].length += feature.properties.length\r\n            }\r\n            return {\r\n              geometry: {\r\n                type: 'polyline',\r\n                paths: feature.geometry.coordinates\r\n              },\r\n              attributes: {\r\n                ...feature.properties,\r\n                id: index, // 为每个要素生成唯一的ID\r\n                routeType: isNoGlareRoute ? '耗时少路径' : '无眩光路径' // 添加路线类型\r\n              }\r\n            }\r\n          })\r\n\r\n          // 按长度排序并选出最长的三条路段\r\n          // passRoads.sort((a, b) => b.length - a.length)\r\n          // const topPassRoads = passRoads.slice(0, 3).map(road => road.name).join('->')\r\n\r\n          // 将 roadLengths 转换为数组并按长度排序，同时保持顺序\r\n          const sortedRoads = Object.entries(roadLengths)\r\n            .sort((a, b) => b[1].length - a[1].length || a[1].order - b[1].order)\r\n          const topPassRoads = sortedRoads.slice(0, 3).map(road => road[0]).join('->')\r\n\r\n          const geojsonLayer = new FeatureLayer({ // 创建FeatureLayer图层\r\n            title: isNoGlareRoute ? '耗时少路径' : '无眩光路径',\r\n            source: features,\r\n            renderer: {\r\n              type: 'simple', // 使用简单渲染器\r\n              title: isNoGlareRoute ? '耗时少路径' : '无眩光路径',\r\n              symbol: {\r\n                type: 'simple-line', // 使用简单线符号\r\n                color: color, // 使用传入的颜色\r\n                width: isNoGlareRoute ? 4.5 : 3 // 根据是否为无眩光路径设置宽度\r\n              }\r\n            },\r\n            objectIdField: 'id', // 必须指定一个唯一的字段作为ObjectId\r\n            fields: [\r\n              { name: 'id', type: 'oid' },\r\n              { name: 'seq', type: 'integer' },\r\n              { name: 'path_seq', type: 'integer' },\r\n              { name: 'node', type: 'integer' },\r\n              { name: 'edge', type: 'integer' },\r\n              { name: 'cost', type: 'double' },\r\n              { name: 'agg_cost', type: 'double' },\r\n              { name: 'length', type: 'double' },\r\n              { name: 'name', type: 'string' },\r\n              { name: 'maxspeed', type: 'integer' },\r\n              { name: 'routeType', type: 'string' } // 添加routeType字段\r\n            ],\r\n            popupTemplate: {\r\n              title: '{routeType} - {name}', // 显示路线类型和路名\r\n              content: [\r\n                {\r\n                  type: 'text',\r\n                  text: `总距离: ${(totalLength / 1000).toFixed(2)} km<br>总耗时: ${(totalCost / 3600).toFixed(2)} 小时`\r\n                },\r\n                {\r\n                  type: 'fields',\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: 'length',\r\n                      label: '长度（米）'\r\n                    },\r\n                    {\r\n                      fieldName: 'cost',\r\n                      label: '耗时（秒）'\r\n                    },\r\n                    {\r\n                      fieldName: 'maxspeed',\r\n                      label: '最大速度'\r\n                    },\r\n                    {\r\n                      fieldName: 'name',\r\n                      label: '名称'\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            }\r\n          })\r\n          const rawGeojsonLayer = markRaw(geojsonLayer)\r\n          // 将FeatureLayer图层添加到地图上\r\n          // 添加到地图\r\n          map.layers.add(rawGeojsonLayer)\r\n          // map.layers.add(geojsonLayer)\r\n          // 计算总时长（小时和分钟）\r\n          if (totalCost < 3600) {\r\n            totalCost += 60\r\n          }\r\n          const hours = Math.floor(totalCost / 3600)\r\n          // console.log('Hours:', hours)\r\n          const minutes = Math.floor((totalCost % 3600) / 60)\r\n          // console.log('Minutes:', minutes)\r\n          // 计算总距离（米或千米）\r\n          let distance\r\n          if (totalLength < 1000) {\r\n            distance = `${totalLength.toFixed(2)}米`\r\n          } else {\r\n            distance = `${(totalLength / 1000).toFixed(2)}千米`\r\n          }\r\n          // 根据是否为无眩光路径来存储结果\r\n          if (isNoGlareRoute) {\r\n            this.noGlareTotalHours = hours\r\n            console.log('Hours:', hours)\r\n            this.noGlareTotalMinutes = minutes\r\n            this.noGlareTotalDistance = distance\r\n            this.noGlareTotalPass = topPassRoads\r\n            this.routeLayers.noGlareRouteId = geojsonLayer\r\n          } else {\r\n            this.totalHours = hours\r\n            this.totalMinutes = minutes\r\n            this.totalDistance = distance\r\n            this.totalPass = topPassRoads\r\n            this.routeLayers.defaultRouteId = geojsonLayer\r\n          }\r\n        })\r\n        .catch(error => console.error('Error loading the geojson file:', error))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/*之后要自己调样式的大小，这个仅作参考*/\r\n#viewDiv {\r\n  position: absolute; /* 固定定位 */\r\n  top: 0; /* 紧贴网页顶部 */\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height:100%; /* 将高度设置为视口高度的100% */\r\n  width: 100%; /* 将宽度设置为视口宽度的100% */\r\n  z-index: -1; /* 设置较低的z-index值，使其在App.vue的下部分 */\r\n  margin: auto;\r\n}\r\n\r\n.lu-jing-gui-hua {\r\n  position: fixed; /* 固定定位 */\r\n  display: flex;\r\n  flex-direction: column; /* 使子元素垂直排列,使大框和revert小框水平分布 */\r\n  z-index: 2;\r\n}\r\n\r\n.search-containers {\r\n  display: flex;\r\n  flex-direction: column; /* 保持垂直排列 */\r\n  justify-content: flex-start; /* 从顶部开始排列 */\r\n  align-items: flex-start; /* 子元素沿交叉轴的开始边缘对齐，即顶部对齐 */\r\n  width: 357px; /* 设置一个固定宽度 */\r\n  height:85px;\r\n  padding-right: 10px; /* 根据需要调整，确保搜索框周围有足够空间 */\r\n  padding-left:32px;/*整个搜索框的左边空间*/\r\n  padding-top: 6px;\r\n  background: #FFFFFF; /* 应用深色毛玻璃效果 */\r\n  -webkit-backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n  backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n  border-top-left-radius: 10px; /* 设置圆角 */\r\n  border-top-right-radius: 10px;\r\n  border: 1px solid rgba(255, 255, 255, 0.45); /* 添加边框 */\r\n  position: absolute; /* 添加相对定位 */\r\n  margin-left: 9px; /* 与左边界保持一定距离 */\r\n}\r\n\r\n/* 移除左右外边距 */\r\n.search-container.start,\r\n.search-container.end {\r\n  position: relative; /* 设置相对定位 */\r\n  margin-top: 5px;\r\n  padding-left: 0px; /* 留出图片的空间 */\r\n  margin-left: 24px; /* 根据侧边栏宽度来设置左边距 */\r\n}\r\n\r\n/* 更改 输入字体的框 的样式 */\r\n.search-box {\r\n  position: relative; /* 允许绝对定位的子元素 */\r\n  padding: 8px 8px; /* 初始内边距 */\r\n  border: 2px solid #ccc;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  flex-grow: 1;\r\n  box-sizing: border-box;\r\n  text-indent: 0px; /* 初始文本缩进，保持文本在左侧 */\r\n  width: 303px; /* 使搜索框填充容器 */\r\n  display: flex;\r\n  align-items: center; /* 垂直居中对齐 */\r\n}\r\n\r\n/* 鼠标悬停时只改变边框颜色，不改变宽度 */\r\n.search-box:hover {\r\n  border-color: rgb(109, 72, 72); /* 改变边框颜色而不是宽度 */\r\n}\r\n\r\n.search-box:focus {\r\n  border-width: 2px;\r\n  border-color: rgb(109, 72, 72);\r\n  text-indent: 0px; /* 聚焦时减少文本缩进 */\r\n}\r\n\r\n.search-results {\r\n  position: absolute;\r\n  z-index: 9999 !important; /* !important可以使这个css代码优先执行，让这个框显示为最高层级 */\r\n  top: 105%; /* 确保列表紧贴搜索框的底部 */\r\n  left: 0;\r\n  width: 100%; /* 使列表宽度与搜索框相同 */\r\n  background-color: white; /* 或其他背景色，确保列表可见 */\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1); /* 可选：添加一些阴影以提升视觉效果 */\r\n  max-height: 200px; /* 限制最大高度，5行大约160px，根据实际行高调整 */\r\n  overflow-y: auto; /* 超出部分显示滚动条 */\r\n  display: flex;\r\n  border-radius: 10px; /* 添加圆角 */\r\n}\r\n\r\n.search-results li:hover {\r\n  text-decoration: underline; /* 添加下划线 */\r\n  background-color: #f0f0f0; /* 更改背景颜色以提高对比度 */\r\n  cursor: pointer; /* 更改鼠标指针为手形，更明显地指示可点击 */\r\n}\r\n\r\n/* 查询按钮的容器样式 */\r\n.search-action {\r\n  display: flex;\r\n  position: absolute; /* 绝对定位 */\r\n  margin-left: 328px; /* 与左边界保持一定距离 */\r\n  top: 11px; /* 与底部保持一定距离 */\r\n  border: 2px solid  #ccc;\r\n  justify-content: flex-start;\r\n  border-radius: 10px;\r\n  cursor: pointer; /* 鼠标悬停时显示指针 */\r\n}\r\n\r\n/* 将CSS链接转换为@import语句 */\r\n@import url(\"https://js.geoscene.cn/4.27/@geoscene/core/assets/geoscene/themes/light/main.css\");\r\n\r\n.car{\r\n  padding-top:3px;\r\n  left:1px;\r\n}\r\n\r\n/* 交换的容器样式 */\r\n.revert{\r\n  width:25px;\r\n  height:28px;\r\n  padding-top: 10px;\r\n  padding-left: 3px;\r\n}\r\n\r\n.revert-containers{\r\n  position: absolute; /* 或使用 fixed，根据需要 */\r\n  left: 0; /* 侧边栏靠在最左边 */\r\n  top: 0; /* 根据需要调整垂直位置 */\r\n  width: 20px;\r\n  height:85px;\r\n  padding-left:5px;\r\n  background-color: #FFFFFF;\r\n  border-radius: 10px; /* 设置圆角 */\r\n  -webkit-backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n  backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n}\r\n\r\n.swap-action button {\r\n  display:flex;\r\n  flex-direction: row; /* 保持水平排列 */\r\n  justify-content: flex-start; /* 水平排列的子元素靠左对齐 */\r\n  position: absolute;\r\n  left: 5px; /* 图标距离父容器左边的距离 */\r\n  top: 50%; /* 垂直居中对齐 */\r\n  transform: translateY(-50%); /* 使用transform属性垂直居中 */\r\n  border:white;/* 边框颜色设置为白色 */\r\n  padding:0px;\r\n  background-color: #FFFFFF;\r\n  cursor: pointer; /* 鼠标悬停时显示指针 */\r\n}\r\n\r\n/* 搜索框框前面的圆圈的样式 */\r\n.search-icon-wrapper {\r\n  display: inline-block; /* 或者使用 flex 布局 */\r\n  position: absolute; /* 绝对定位 */\r\n  left: -20px; /* 根据需要调整 */\r\n  top: 50%;\r\n  transform: translateY(-50%); /* 垂直居中对齐 */\r\n}\r\n\r\n/* 删除logo的样式 */\r\n.search-box-img {/* 作用：使得 删除logo 在搜索框内 */\r\n  display: flex;\r\n  position: absolute;\r\n  left:278px;\r\n  top: 50%;\r\n  transform: translateY(-35%); /* 垂直居中对齐 */\r\n  padding-inline-end: 0px;\r\n}\r\n\r\n.delete{\r\n  cursor: pointer; /* 鼠标悬停时显示指针 */\r\n}\r\n\r\n.delete img {\r\n  pointer-events: none; /* 点击图片时不会影响输入框 （记得改成删除这个框框内容）*/\r\n}\r\n\r\n/* 搜索logo的样式 */\r\n.search-action img {\r\n  transform: scale(0.85); /* 将图片缩放到原始尺寸的50% */\r\n}\r\n\r\n.search-action:hover{\r\n  border-color: blue;\r\n}\r\n\r\n.main-container{\r\n  position: fixed;\r\n  z-index: 1;\r\n}\r\n\r\n.main-container{\r\n  position: absolute;\r\n  z-index: 1;\r\n}\r\n\r\n/* 选择时间框的样式 */\r\n.choose-time{\r\n  transform: none;\r\n  position: absolute;\r\n  display: block;\r\n  width: 390px;\r\n  height: 30px;\r\n  border-bottom-left-radius: 10px; /* 设置圆角 */\r\n  border-bottom-right-radius: 10px;\r\n  background-color:#FFFFFF;\r\n  margin-top: 90px;/* 控制时间选择框在网页垂直方向的位置 */\r\n  padding-left: 10px;\r\n  padding-top: 3px;\r\n  margin-left: 9px;\r\n}\r\n\r\n.form-group label,\r\n.form-group input {\r\n  margin-right: 10px; /* 右侧外边距 */\r\n}\r\n\r\n/* 路线展示框的样式 */\r\n.routelist{\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: column; /* 垂直排列 */\r\n  left: 8px; /* 侧边栏靠在最左边 */\r\n  margin-top: 135px; /* 控制路线展示框在网页垂直方向的位置 */\r\n  width: 400px;\r\n  height: auto;\r\n  background-color: #FFFFFF;\r\n  border-radius: 10px; /* 设置圆角 */\r\n  -webkit-backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n  backdrop-filter: blur(25px); /* 应用毛玻璃效果 */\r\n  overflow: hidden;\r\n}\r\n\r\n/* 过渡效果 */\r\n.fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.8s ease-in-out, max-height 0.6s ease-in-out;\r\n}\r\n\r\n.fade-enter, .fade-leave-to {\r\n  opacity: 0;\r\n  max-height: 1000px;\r\n}\r\n\r\n.fade-enter-to, .fade-leave {\r\n  opacity: 1;\r\n  max-height: 1000px;\r\n}\r\n\r\n.cardlist{\r\n  padding:5px;\r\n  margin-top: 10px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n.route{\r\n  left: 8px; /* 距离左侧的距离 */\r\n  width:348px;\r\n  /* height: 12vh; */\r\n  height: auto;\r\n  border-radius: 10px; /* 设置圆角 */\r\n  border: 2px solid #E4E6E7;\r\n  padding: 25px 20px 10px 15px;\r\n  cursor: pointer;\r\n  margin-bottom: 8px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.route:hover{\r\n  border-color: rgb(109, 72, 72);\r\n}\r\n\r\n.introduction{\r\n  color: #3385FF;\r\n}\r\n\r\n.intro span{\r\n  margin-right: 10px; /* 右侧外边距 */\r\n}\r\n\r\n.toggle-button {\r\n  align-self: center; /* 居中对齐 */\r\n  cursor: pointer;\r\n  margin-bottom: 2px;\r\n  margin-top: 2px;\r\n}\r\n\r\n.open-button:hover {\r\n  background-color: rgb(216, 180, 133);\r\n}\r\n\r\n.open-button {\r\n  position: fixed;\r\n  left: 8px;\r\n  margin-top: 135px;\r\n  background-color: #FFFFFF;\r\n  border: 2px solid #E4E6E7;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background-color: antiquewhite;\r\n  color: rgb(109,72,72);\r\n  cursor: pointer;\r\n}\r\n\r\n/* 新的覆盖层容器样式 */\r\n.loader-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 45%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, 0.8); /* 可选：添加半透明背景 */\r\n  transform: translateX(-50%);\r\n  z-index: 10; /* 确保覆盖层在最上层 */\r\n}\r\n\r\n/* 加载动画的样式 */\r\n.loader {\r\n  display: inline-grid;\r\n  width: 90px;\r\n  aspect-ratio: 1;\r\n  animation: l3-0 5s steps(10) infinite;\r\n}\r\n\r\n.loader:before,\r\n.loader:after {\r\n  content:\"\";\r\n  grid-area: 1/1;\r\n}\r\n\r\n.loader:before {\r\n  clip-path: polygon(100% 50%,90.45% 79.39%,65.45% 97.55%,34.55% 97.55%,9.55% 79.39%,0% 50%,9.55% 20.61%,34.55% 2.45%,65.45% 2.45%,90.45% 20.61%,100% 50%,85.6% 24.14%,63.6% 8.15%,36.4% 8.15%,14.4% 24.14%,6% 50%,14.4% 75.86%,36.4% 91.85%,63.6% 91.85%,85.6% 75.86%,94% 50%,85.6% 24.14%);\r\n  background: #574951;\r\n}\r\n\r\n.loader:after {\r\n  background: #83988E;\r\n  clip-path: polygon(100% 50%,65.45% 97.55%,9.55% 79.39%,9.55% 20.61%,65.45% 2.45%);\r\n  margin: 27%;\r\n  translate: 46% 0;\r\n  transform-origin: right;\r\n  animation: l3-1 .5s linear infinite;\r\n}\r\n\r\n/* 新的覆盖层容器样式 */\r\n.maploader-overlay {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 25%;\r\n  height: 25%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, 0.8); /* 可选：添加半透明背景 */\r\n  transform: translate(-50%, -50%);\r\n  z-index: 10; /* 确保覆盖层在最上层 */\r\n}\r\n\r\n/* 加载动画的样式 */\r\n.maploader {\r\n  display: inline-grid;\r\n  width: 90px;\r\n  aspect-ratio: 1;\r\n  animation: l3-0 5s steps(10) infinite;\r\n}\r\n\r\n.maploader:before,\r\n.maploader:after {\r\n  content:\"\";\r\n  grid-area: 1/1;\r\n}\r\n\r\n.maploader:before {\r\n  clip-path: polygon(100% 50%,90.45% 79.39%,65.45% 97.55%,34.55% 97.55%,9.55% 79.39%,0% 50%,9.55% 20.61%,34.55% 2.45%,65.45% 2.45%,90.45% 20.61%,100% 50%,85.6% 24.14%,63.6% 8.15%,36.4% 8.15%,14.4% 24.14%,6% 50%,14.4% 75.86%,36.4% 91.85%,63.6% 91.85%,85.6% 75.86%,94% 50%,85.6% 24.14%);\r\n  background: #574951;\r\n}\r\n\r\n.maploader:after {\r\n  background: #83988E;\r\n  clip-path: polygon(100% 50%,65.45% 97.55%,9.55% 79.39%,9.55% 20.61%,65.45% 2.45%);\r\n  margin: 27%;\r\n  translate: 46% 0;\r\n  transform-origin: right;\r\n  animation: l3-1 .5s linear infinite;\r\n}\r\n\r\n@keyframes l3-0 {to{rotate: 1turn}}\r\n@keyframes l3-1 {\r\n  0%{rotate:  18deg}\r\n  to{rotate: -18deg}\r\n}\r\n\r\n.search-results li.highlighted {\r\n  background-color: #f0f0f0; /* 高亮背景颜色 */\r\n}\r\n\r\n.geoscene-distance-measurement-2d__clear-button{\r\n  background-color: antiquewhite;\r\n  border-left-color: antiquewhite;\r\n  border-right-color: antiquewhite;\r\n  border-top-color: antiquewhite;\r\n  border-bottom-color: antiquewhite;\r\n  color:rgb(109, 72, 72);\r\n}\r\n\r\n.geoscene-distance-measurement-2d__clear-button:hover{\r\n  background-color: rgb(216, 180, 133);\r\n  border-left-color: rgb(216, 180, 133);\r\n  border-right-color: rgb(216, 180, 133);\r\n  border-top-color: rgb(216, 180, 133);\r\n  border-bottom-color: rgb(216, 180, 133);\r\n  color: rgb(109, 72, 72);\r\n}\r\n\r\n.geoscene-layer-list__item-container{\r\n  background-color: antiquewhite;\r\n  border-left-color: antiquewhite;\r\n  border-right-color: antiquewhite;\r\n  border-top-color: antiquewhite;\r\n  border-bottom-color: antiquewhite;\r\n  color:rgb(109, 72, 72);\r\n}\r\n\r\n.geoscene-layer-list__item-container:hover{\r\n  background-color: rgb(216, 180, 133);\r\n  border-left-color: rgb(216, 180, 133);\r\n  border-right-color: rgb(216, 180, 133);\r\n  border-top-color: rgb(216, 180, 133);\r\n  border-bottom-color: rgb(216, 180, 133);\r\n  color: rgb(109, 72, 72);\r\n}\r\n\r\n.geoscene-distance-measurement-2d__container{\r\n  width:170px;\r\n  margin: auto;\r\n}\r\n\r\n.geoscene-component.geoscene-distance-measurement-2d.geoscene-widget.geoscene-widget--panel{\r\n  width:180px;\r\n}\r\n\r\n/* .geoscene-ui-bottom-right.geoscene-ui-corner{\r\n  width:300px;\r\n} */\r\n\r\n.geoscene-component.geoscene-basemap-gallery.geoscene-widget.geoscene-widget--panel-height-only.geoscene-basemap-gallery--grid{\r\n  width: 200px;\r\n  height: 200px;\r\n}\r\n\r\n.geoscene-component.geoscene-layer-list.geoscene-widget.geoscene-widget--panel{\r\n  width:200px;\r\n}\r\n</style>\r\n","import { render } from \"./RouteView.vue?vue&type=template&id=77b2c606\"\nimport script from \"./RouteView.vue?vue&type=script&lang=js\"\nexport * from \"./RouteView.vue?vue&type=script&lang=js\"\n\nimport \"./RouteView.vue?vue&type=style&index=0&id=77b2c606&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","key","ref","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","src","_imports_0","_hoisted_4","onClick","_cache","args","$options","swap","title","require","alt","_hoisted_5","_hoisted_6","_imports_1","type","$event","$data","searchQueryStart","onInput","onSearchInputChange","placeholder","_hoisted_7","clc1","_imports_2","searchResults","length","_hoisted_8","_renderList","result","index","_normalizeClass","highlightedIndex","selectResult","name","_hoisted_9","_createCommentVNode","_hoisted_10","_imports_3","searchQueryEnd","_hoisted_11","clc2","searchResultsEnd","_hoisted_12","_hoisted_13","onSearch","_hoisted_14","isLoading","_hoisted_15","id","ismaploading","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","for","selectedDate","min","minDate","max","maxDate","isDateDisabled","onChange","handleDateChange","_hoisted_20","formattedTime","onTimeInputChange","step","_createVNode","_Transition","default","_withCtx","_hoisted_21","_hoisted_22","highlightRoute","style","_normalizeStyle","color","getColor","_hoisted_23","_toDisplayString","totalHours","totalMinutes","_createTextVNode","totalDistance","_hoisted_24","totalPass","_hoisted_25","noGlareTotalHours","noGlareTotalMinutes","noGlareTotalDistance","_hoisted_26","noGlareTotalPass","toggleRouteList","isRouteListVisible","_","data","selectedResultStart","selectedResultEnd","selectedTime","highlightedRouteId","routeLayers","blinkingTimers","highlightedColor","highlightedBlinkColor","noGlareColor","defaultColor","noGlareRouteId","defaultRouteId","BasemapName","mounted","this","parseUrlParams","initMap","$route","query","start","end","JSON","parse","window","addEventListener","handleKeydown","beforeUnmount","removeEventListener","computed","hours","minutes","split","map","Number","roundedMinutes","Math","floor","String","padStart","methods","routeId","resetRouteStyle","clearInterval","layer","newRenderer","symbol","width","renderer","startBlinking","isBlinkOn","originalColor","intervalId","setInterval","setTimeout","finalRenderer","isNoGlare","event","value","target","date","selected","Date","month","getMonth","day","getDate","alert","preventDefault","nextTick","highlightedElement","$refs","searchResultsStart","querySelector","scrollIntoView","block","behavior","updateTime","now","currentTime","getHours","getMinutes","isTimeFromUrl","isSwapping","tempQuery","tempResult","then","console","log","handleBasemapChange","catch","urlParams","URLSearchParams","location","search","startParam","get","endParam","dateParam","timeParam","defaultRouteIdParam","timeBasedRouteIdParam","startObj","decodeURIComponent","address","e","error","endObj","timeBasedRouteId","created","isStart","searchResultsField","includes","fetch","method","headers","body","stringify","response","json","simplifiedResult","wgs84_latitude","wgs84_longitude","baidu_index","baidu_latitude","baidu_longitude","label","currentStart","currentEnd","$router","push","path","time","BasemapLayer","Promise","resolve","reject","startWithLocation","endWithLocation","axios","post","defaultRoutePlanId","default_id","timeBasedRoutePlanId","time_based_id","Error","basemapName","Map","basemap","view","MapView","container","center","zoom","constraints","geometry","xmin","ymin","xmax","ymax","minScale","maxScale","rotationEnabled","snapToZoom","basemapGallery","BasemapGallery","source","watch","newBasemap","compass","Compass","scaleBar","ScaleBar","unit","distanceMeasurement2D","DistanceMeasurement2D","unitOptions","metric","nonMetric","iconClass","layerList","LayerList","ui","add","position","move","graphicsLayer","GraphicsLayer","featureLayer","FeatureLayer","url","outline","popupTemplate","content","fieldInfos","fieldName","when","drawPoints","adjustView","drawRoutes","err","basemapMapping","set","history","replaceState","pathname","padding","extent","Extent","goTo","startPoint","Point","longitude","latitude","endPoint","startGraphic","Graphic","size","attributes","endGraphic","addMany","fetchAndDrawRoute","isNoGlareRoute","geojsonUrl","totalLength","totalCost","roadLengths","features","feature","properties","cost","order","paths","coordinates","routeType","sortedRoads","Object","entries","sort","a","b","topPassRoads","slice","road","join","geojsonLayer","objectIdField","fields","text","toFixed","rawGeojsonLayer","markRaw","layers","distance","__exports__","render"],"sourceRoot":""}