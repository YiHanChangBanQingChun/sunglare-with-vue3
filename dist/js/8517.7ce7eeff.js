"use strict";(self["webpackChunksun_glare_project"]=self["webpackChunksun_glare_project"]||[]).push([[8517],{58517:function(e,t,o){o.r(t),o.d(t,{default:function(){return x}});var r=o(71457),i=o(19470),s=o(86039),l=(o(85092),o(40912)),n=o(71120),a=o(4244),y=o(76543),p=(o(37679),o(69292),o(51020),o(70681)),u=o(29916),c=o(41759),d=o(72465),h=o(71680),S=o(79366),f=o(25673),g=o(21107),m=o(8197),v=o(99024),_=o(83256),M=o(19862),b=o(73484),C=o(14428),Z=o(8494),A=o(19925);const k=["atom","xml"],w={base:M.A,key:"type",typeMap:{"simple-line":b.A},errorContext:"symbol"},G={base:M.A,key:"type",typeMap:{"picture-marker":C.A,"simple-marker":Z.A},errorContext:"symbol"},P={base:M.A,key:"type",typeMap:{"simple-fill":A.A},errorContext:"symbol"};let j=class extends((0,S.d)((0,m.J)((0,f.q)((0,g.A)((0,v.j)((0,l.P)(h.A))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,a.e7)(this.url,k)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n.QP).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:o}=await(0,s["default"])(i.A.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,d.oT)(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return o}_hasGeometry(e){return this.featureCollections?.some((t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0))??!1}};(0,r._)([(0,y.MZ)()],j.prototype,"description",void 0),(0,r._)([(0,y.MZ)()],j.prototype,"featureCollections",void 0),(0,r._)([(0,p.w)("service","featureCollections",["featureCollection.layers"])],j.prototype,"readFeatureCollections",null),(0,r._)([(0,y.MZ)({type:c.A,json:{name:"lookAtExtent"}})],j.prototype,"fullExtent",void 0),(0,r._)([(0,y.MZ)(_.id)],j.prototype,"id",void 0),(0,r._)([(0,y.MZ)(_.fV)],j.prototype,"legendEnabled",void 0),(0,r._)([(0,y.MZ)({types:w,json:{write:!0}})],j.prototype,"lineSymbol",void 0),(0,r._)([(0,y.MZ)({type:["show","hide"]})],j.prototype,"listMode",void 0),(0,r._)([(0,y.MZ)({types:G,json:{write:!0}})],j.prototype,"pointSymbol",void 0),(0,r._)([(0,y.MZ)({types:P,json:{write:!0}})],j.prototype,"polygonSymbol",void 0),(0,r._)([(0,y.MZ)({type:["GeoRSS"]})],j.prototype,"operationalLayerType",void 0),(0,r._)([(0,y.MZ)(_.OZ)],j.prototype,"url",void 0),(0,r._)([(0,y.MZ)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],j.prototype,"title",null),(0,r._)([(0,y.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],j.prototype,"type",void 0),j=(0,r._)([(0,u.$)("geoscene.layers.GeoRSSLayer")],j);const x=j}}]);
//# sourceMappingURL=8517.7ce7eeff.js.map