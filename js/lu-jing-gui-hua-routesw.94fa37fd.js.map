{"version":3,"file":"js/lu-jing-gui-hua-routesw.94fa37fd.js","mappings":"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","sources":["webpack://sun-glare-project/./src/views/RouteViewsw.vue","webpack://sun-glare-project/./src/views/RouteViewsw.vue?1fc5"],"sourcesContent":["<template>\r\n  <!-- 输入了起点和终点之后,还没有摁查询路径的画面 -->\r\n  <div class=\"lu-jing-gui-hua\">\r\n    <!-- 搜索框 -->\r\n    <!-- 外层容器 -->\r\n    <div class=\"search-containers\">\r\n      <!-- 交换的侧边栏 -->\r\n      <div class=\"revert-containers\">\r\n        <div class=\"car\"><img src='@/assets/image/map_icon/car.png'></div>\r\n        <div class=\"swap-action\">\r\n          <!-- 绑定 swap 方法到点击事件 -->\r\n          <button @click=\"swap\" title=\"切换起终点\">\r\n            <img :src=\"require('@/assets/image/map_icon/revert_new_dark.png')\" alt=\"\" class=\"revert\">\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- 搜索起点的容器 -->\r\n      <div class=\"search-container start\">\r\n        <!-- 图片 -->\r\n        <div class=\"search-icon-wrapper\">\r\n          <img src='@/assets/image/map_icon/pink-circle.png' alt=\"pink\">\r\n        </div>\r\n        <!-- 输入框 -->\r\n        <input type=\"text\" v-model=\"searchQueryStart\" @input=\"onSearchInputChange($event, true)\" placeholder=\"请输入起点\" class=\"search-box search-box-start\"/>\r\n        <!-- 搜索框内部的删除图片 -->\r\n        <span class=\"search-box-img\">\r\n          <div class=\"delete\" title=\"清空\" @click=\"clc1\">\r\n            <img src='@/assets/image/map_icon/cancel.png' alt=\"delete1\">\r\n          </div>\r\n        </span>\r\n        <!-- 起点搜索结果展示 -->\r\n        <div class=\"search-results\" v-if=\"searchResults.length && searchQueryStart\" ref=\"searchResultsStart\">\r\n    <ul>\r\n      <li v-for=\"(result, index) in searchResults\" :key=\"index\" :class=\"{ 'highlighted': index === highlightedIndex }\" @click=\"selectResult(result, true)\">\r\n        {{ result.name }}\r\n      </li>\r\n        </ul>\r\n        </div>\r\n    </div>\r\n      <!-- 搜索终点的容器 -->\r\n      <div class=\"search-container end\">\r\n        <!-- 图片容器 -->\r\n        <div class=\"search-icon-wrapper\">\r\n          <img src='@/assets/image/map_icon/green-circle.png' alt=\"green\">\r\n        </div>\r\n        <!-- 输入框 -->\r\n        <input type=\"text\" v-model=\"searchQueryEnd\" @input=\"onSearchInputChange($event, false)\" placeholder=\"请输入终点\" class=\"search-box search-box-end\"/>\r\n         <!-- 搜索框内部的删除图片 -->\r\n        <span class=\"search-box-img\">\r\n          <div class=\"delete\" title=\"清空\" @click=\"clc2\">\r\n            <img src='@/assets/image/map_icon/cancel.png' alt=\"delete1\">\r\n          </div>\r\n        </span>\r\n        <!-- 终点搜索结果展示 -->\r\n        <div class=\"search-results\" v-if=\"searchResultsEnd.length && searchQueryEnd\" ref=\"searchResultsEnd\">\r\n    <ul>\r\n      <li v-for=\"(result, index) in searchResultsEnd\" :key=\"index\" :class=\"{ 'highlighted': index === highlightedIndex }\" @click=\"selectResult(result, false)\">\r\n        {{ result.name }}\r\n      </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"search-action\" @click=\"onSearch\" title=\"搜索\">\r\n        <img :src=\"require('@/assets/image/map_icon/search.png')\" alt=\"\" class=\"search\">\r\n      </div>\r\n    <!-- 新的覆盖层容器 -->\r\n    <div v-if=\"isLoading\" class=\"loader-overlay\">\r\n      <div class=\"loader\">\r\n      </div>\r\n    </div>\r\n    </div>\r\n  </div>\r\n  <!-- 地图展示 -->\r\n  <div id=\"viewDiv\"></div>\r\n  <div v-if=\"ismaploading\" class=\"maploader-overlay\">\r\n    <div class=\"maploader\">\r\n    </div>\r\n  </div>\r\n  <!-- 时间选择框和路径展示框 -->\r\n  <div class=\"main-container\">\r\n    <!-- 时间选择框 -->\r\n    <div class=\"choose-time\">\r\n      <div class=\"form-group\">\r\n        <label for=\"date-input\">选择日期：</label>\r\n        <input id=\"date-input\" type=\"date\" v-model=\"selectedDate\" :min=\"minDate\" :max=\"maxDate\" :class=\"{ 'invalid-date': isDateDisabled(selectedDate) }\" @change=\"handleDateChange\">\r\n        <label for=\"time-input\">选择时间：</label>\r\n        <input id=\"time-input\" type=\"time\" v-model=\"formattedTime\" @input=\"onTimeInputChange\" step=\"600\"> <!-- 600秒 = 10分钟 -->\r\n      </div>\r\n    </div>\r\n    <div>\r\n   <!-- 路线展示 -->\r\n   <transition name=\"fade\">\r\n      <div class=\"routelist\" v-show=\"isRouteListVisible\">\r\n        <ul class=\"cardlist\">\r\n          <div class=\"route\" data-index=\"1\" @click=\"highlightRoute('noGlareRouteId')\">\r\n            <div class=\"introduction\" :style=\"{ color: getColor(1) }\">无眩光路径</div>\r\n            <p class=\"intro\">\r\n              <span>用时：{{totalHours}}小时{{totalMinutes}}分钟</span> |\r\n              <!-- <span></span> -->\r\n              <span>路长：{{totalDistance}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n            <p class=\"intro\">\r\n              <span>途径：{{totalPass }}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n          </div>\r\n          <div class=\"route\" data-index=\"0\" @click=\"highlightRoute('defaultRouteId')\">\r\n            <div class=\"introduction\" :style=\"{ color: getColor(0) }\">常规路径</div>\r\n            <p class=\"intro\">\r\n              <span>用时：{{noGlareTotalHours}}小时{{noGlareTotalMinutes}}分钟</span> |\r\n              <!-- <span></span> -->\r\n              <span>路长：{{noGlareTotalDistance}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n            <p class=\"intro\">\r\n              <span>途径：{{noGlareTotalPass}}</span>\r\n              <!-- <span></span> -->\r\n            </p>\r\n          </div>\r\n        </ul>\r\n        <span class=\"toggle-button\" @click=\"toggleRouteList\" title=\"隐藏\">\r\n          <img src='@/assets/image/map_icon/cancel.png' alt=\"delete1\">\r\n        </span>\r\n      </div>\r\n    </transition>\r\n    <button v-if=\"!isRouteListVisible\" @click=\"toggleRouteList\" class=\"open-button\">展开路线结果</button>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Map from '@geoscene/core/Map.js'\r\nimport MapView from '@geoscene/core/views/MapView.js'\r\nimport Graphic from '@geoscene/core/Graphic'\r\nimport Point from '@geoscene/core/geometry/Point.js'\r\nimport GraphicsLayer from '@geoscene/core/layers/GraphicsLayer'\r\nimport FeatureLayer from '@geoscene/core/layers/FeatureLayer'\r\nimport Extent from '@geoscene/core/geometry/Extent'\r\nimport axios from 'axios'\r\nimport { markRaw } from 'vue'\r\nimport BasemapGallery from '@geoscene/core/widgets/BasemapGallery.js'\r\nimport Compass from '@geoscene/core/widgets/Compass.js'\r\nimport ScaleBar from '@geoscene/core/widgets/ScaleBar.js'\r\nimport DistanceMeasurement2D from '@geoscene/core/widgets/DistanceMeasurement2D.js'\r\nimport LayerList from '@geoscene/core/widgets/LayerList.js'\r\nimport { parseUrlParams, toggleRouteList, getColor, highlightRoute, selectResult, swap } from '@/assets/share_js/routeview_public'\r\nimport { handleKeydown, updateTime, clc1, clc2, isDateDisabled, handleDateChange, onTimeInputChange, onSearchInputChange } from '@/assets/share_js/routeplanning_all'\r\n\r\nexport default {\r\n  name: 'RouteView',\r\n  data () {\r\n    return {\r\n      searchQueryStart: '',\r\n      searchQueryEnd: '',\r\n      selectedResultStart: null,\r\n      selectedResultEnd: null,\r\n      searchResults: [],\r\n      searchResultsEnd: [],\r\n      isLoading: false,\r\n      ismaploading: false,\r\n      totalHours: 0,\r\n      totalMinutes: 0,\r\n      totalDistance: '0千米',\r\n      selectedDate: '', // 用户选择的日期\r\n      selectedTime: '', // 用户选择的时间\r\n      noGlareTotalHours: 0, // 无眩光路径的总时长（小时）\r\n      noGlareTotalMinutes: 0, // 无眩光路径的总时长（分钟）\r\n      highlightedIndex: -1, // 高亮的搜索结果索引\r\n      noGlareTotalDistance: '0千米', // 无眩光路径的总距离\r\n      highlightedRouteId: null, // 当前高亮显示的路径ID\r\n      routeLayers: {}, // 存储路径的FeatureLayer实例\r\n      // 闪烁路径的相关数据\r\n      blinkingTimers: {}, // 存储每条路径的闪烁定时器 ID\r\n      highlightedColor: [0, 123, 255, 1], // 浅蓝色，完全不透明\r\n      highlightedBlinkColor: [0, 123, 255, 0.2], // 浅蓝色，半透明\r\n      noGlareColor: [244, 96, 108], // 无眩光路径为红色\r\n      defaultColor: [25, 202, 173], // 常规路径为绿色\r\n      noGlareRouteId: 'noGlareRouteId',\r\n      defaultRouteId: 'defaultRouteId',\r\n      isRouteListVisible: true, // 路线列表是否可见\r\n      totalPass: '',\r\n      noGlareTotalPass: '',\r\n      BasemapName: null\r\n    }\r\n  },\r\n  // 在组件挂载时初始化地图\r\n  mounted () {\r\n    // this.parseUrlParams()\r\n    this.created()\r\n    this.initMap()\r\n    if (this.$route.query.start && this.$route.query.end) {\r\n      this.selectedResultStart = JSON.parse(this.$route.query.start)\r\n      this.selectedResultEnd = JSON.parse(this.$route.query.end)\r\n    }\r\n    parseUrlParams(this)\r\n    // 设置定时器，每隔1分钟更新时间\r\n    window.addEventListener('keydown', this.handleKeydown)\r\n  },\r\n  beforeUnmount () {\r\n    window.removeEventListener('keydown', this.handleKeydown)\r\n  },\r\n  computed: {\r\n    minDate () {\r\n      return '2024-01-01'\r\n    },\r\n    maxDate () {\r\n      return '2024-12-31'\r\n    },\r\n    formattedTime () {\r\n      // 格式化时间为10分钟间隔\r\n      if (!this.selectedTime) return ''\r\n      const [hours, minutes] = this.selectedTime.split(':').map(Number)\r\n      const roundedMinutes = Math.floor(minutes / 10) * 10\r\n      return `${String(hours).padStart(2, '0')}:${String(roundedMinutes).padStart(2, '0')}`\r\n    }\r\n  },\r\n  methods: {\r\n    toggleRouteList () {\r\n      toggleRouteList(this)\r\n    },\r\n    getColor (index) {\r\n      return getColor(index)\r\n    },\r\n    highlightRoute (routeId) {\r\n      highlightRoute(this, routeId)\r\n    },\r\n    onTimeInputChange (event) {\r\n      onTimeInputChange(this, event)\r\n    },\r\n    isDateDisabled (date) {\r\n      return isDateDisabled(this, date)\r\n    },\r\n    handleDateChange (event) {\r\n      handleDateChange(this, event)\r\n    },\r\n    handleKeydown (event) {\r\n      handleKeydown(this, event)\r\n    },\r\n    updateTime () {\r\n      updateTime(this)\r\n    },\r\n    clc1 () {\r\n      clc1(this)\r\n    },\r\n    clc2 () {\r\n      clc2(this)\r\n    },\r\n    swap () {\r\n      swap(this)\r\n    },\r\n    onSearchInputChange (event, isStart) {\r\n      onSearchInputChange(this, event, isStart)\r\n    },\r\n    selectResult (result, isStart = true) {\r\n      selectResult(this, result, isStart)\r\n    },\r\n    onSearch () {\r\n      return new Promise((resolve, reject) => {\r\n        // 检查是否两个结果都已选择\r\n        if (this.selectedResultStart && this.selectedResultEnd) {\r\n          // 显示加载动画\r\n          this.isLoading = true\r\n          // 构造包含location属性的起点和终点对象\r\n          const startWithLocation = {\r\n            ...this.selectedResultStart,\r\n            location: [this.selectedResultStart.wgs84_longitude, this.selectedResultStart.wgs84_latitude]\r\n          }\r\n          const endWithLocation = {\r\n            ...this.selectedResultEnd,\r\n            location: [this.selectedResultEnd.wgs84_longitude, this.selectedResultEnd.wgs84_latitude]\r\n          }\r\n          const formattedTime = this.selectedTime.length === 5 ? `${this.selectedTime}:00` : this.selectedTime\r\n          // 发送请求到后端进行路径规划\r\n          axios.post(`${process.env.VUE_APP_API_URL}/api/route/plan`, { start: startWithLocation, end: endWithLocation, date: this.selectedDate, time: formattedTime })\r\n            .then(response => {\r\n              // 后端返回的路径规划结果ID\r\n              const defaultRoutePlanId = response.data.default_id\r\n              const timeBasedRoutePlanId = response.data.time_based_id\r\n              // 隐藏加载动画\r\n              this.isLoading = false\r\n              // 使用Vue Router跳转到结果页面，并传递路径规划结果ID\r\n              this.$router.push({\r\n                path: '/lu-jing-gui-hua/route',\r\n                query: {\r\n                  start: JSON.stringify(startWithLocation),\r\n                  end: JSON.stringify(endWithLocation),\r\n                  default_id: defaultRoutePlanId,\r\n                  time_based_id: timeBasedRoutePlanId,\r\n                  date: this.selectedDate,\r\n                  time: formattedTime,\r\n                  BasemapLayer: this.BasemapName\r\n                }\r\n              })\r\n              // 更新搜索框的值\r\n              this.searchQueryStart = startWithLocation.name\r\n              this.searchQueryEnd = endWithLocation.name\r\n              resolve()\r\n            })\r\n            .catch(error => {\r\n              console.error(error)\r\n              // 隐藏加载动画\r\n              this.isLoading = false\r\n              // 错误处理，例如显示提示信息\r\n              alert('路径规划失败，请稍后再试。')\r\n              reject(error)\r\n            })\r\n        } else {\r\n          // 如果起点或终点未选择，显示提示信息\r\n          alert('请确保起点和终点都已选择。')\r\n          reject(new Error('请确保起点和终点都已选择。'))\r\n        }\r\n      })\r\n    },\r\n    // 初始化地图\r\n    initMap (basemapName) {\r\n      const map = new Map({\r\n        basemap: basemapName || this.BasemapName || 'tianditu-vector' // 使用适合的底图\r\n      })\r\n      this.map = map\r\n      this.view = new MapView({\r\n        container: 'viewDiv', // 使用正确的容器ID\r\n        map: map,\r\n        center: [114.3, 30.7], // 默认中心点坐标\r\n        zoom: 4, // 默认缩放级别\r\n        constraints: {\r\n          geometry: {\r\n            type: 'extent',\r\n            xmin: 113.6,\r\n            ymin: 29.9,\r\n            xmax: 115.0,\r\n            ymax: 31.3\r\n          },\r\n          minScale: 500,\r\n          maxScale: 2000000,\r\n          rotationEnabled: false,\r\n          snapToZoom: false\r\n        }\r\n      })\r\n      // 创建 BasemapGallery 实例\r\n      const basemapGallery = new BasemapGallery({\r\n        view: this.view,\r\n        source: {\r\n          query: {\r\n            title: '\"Basemaps for Developers\" AND owner:geoscenedev'\r\n          }\r\n        }\r\n      })\r\n      // 监听底图选择事件\r\n      basemapGallery.watch('activeBasemap', (newBasemap) => {\r\n        this.handleBasemapChange(newBasemap)\r\n      })\r\n      const compass = new Compass({\r\n        view: this.view\r\n      })\r\n      // 创建 ScaleBar 实例\r\n      const scaleBar = new ScaleBar({\r\n        view: this.view,\r\n        unit: 'metric', // 使用公制单位\r\n        style: 'ruler' // 使用标尺样式\r\n      })\r\n      // 创建 DistanceMeasurement2D 实例\r\n      const distanceMeasurement2D = new DistanceMeasurement2D({\r\n        view: this.view,\r\n        unit: 'metric',\r\n        unitOptions: {\r\n          metric: ['kilometers', 'meters'],\r\n          nonMetric: ['miles', 'feet']\r\n        },\r\n        iconClass: 'esri-icon-measure-line' // 设置图标类\r\n      })\r\n      // 创建 LayerList 实例\r\n      const layerList = new LayerList({\r\n        view: this.view\r\n      })\r\n      // 将 DistanceMeasurement2D 添加到地图视图的左下角\r\n      this.view.ui.add(distanceMeasurement2D, {\r\n        position: 'bottom-leading',\r\n        index: 0 // 确保它在最上面\r\n      })\r\n      // 将 BasemapGallery 添加到地图视图的右下角\r\n      this.view.ui.add(basemapGallery, {\r\n        position: 'bottom-right',\r\n        index: 0\r\n      })\r\n      // 将 LayerList 添加到地图视图的右下角\r\n      this.view.ui.add(layerList, {\r\n        position: 'bottom-right',\r\n        index: 1\r\n      })\r\n      // 移动缩放控件到左下角\r\n      this.view.ui.move('zoom', {\r\n        position: 'bottom-left',\r\n        index: 1\r\n      })\r\n      // 将指南针添加到地图视图的左下角\r\n      this.view.ui.add(compass, {\r\n        position: 'bottom-left',\r\n        index: 2\r\n      })\r\n      // 将 ScaleBar 添加到地图视图的左下角\r\n      this.view.ui.add(scaleBar, {\r\n        position: 'bottom-left',\r\n        index: 3\r\n      })\r\n\r\n      // 创建一个新的GraphicsLayer实例，以便在地图上绘制点\r\n      const graphicsLayer = new GraphicsLayer(\r\n        {\r\n          title: '起点与终点'\r\n        }\r\n      )\r\n      map.add(graphicsLayer)\r\n\r\n      // 创建 FeatureLayer 实例\r\n      const featureLayer = new FeatureLayer({\r\n        url: 'https://www.geosceneonline.cn/server/rest/services/Hosted/wuhan_village/FeatureServer',\r\n        title: '武汉县区面', // 设置图层名称\r\n        renderer: {\r\n          type: 'simple', // 使用简单渲染器\r\n          title: '县区边界',\r\n          symbol: {\r\n            type: 'simple-fill', // 使用简单填充符号\r\n            color: [0, 0, 0, 0], // 填充颜色透明\r\n            outline: {\r\n              color: [0, 0, 0, 1], // 轮廓颜色红色\r\n              width: 1\r\n            }\r\n          }\r\n        },\r\n        popupTemplate: {\r\n          content: [{\r\n            type: 'fields',\r\n            fieldInfos: [{\r\n              fieldName: '县区name',\r\n              label: '县区名称'\r\n            }]\r\n          }]\r\n        }\r\n      })\r\n      // 将 FeatureLayer 添加到地图\r\n      map.add(featureLayer)\r\n      map.add(graphicsLayer)\r\n\r\n      this.view.when(() => {\r\n        this.drawPoints(graphicsLayer)\r\n        this.adjustView()\r\n        this.drawRoutes(map)\r\n      }).catch((err) => {\r\n        console.error('MapView initialization error:', err)\r\n      })\r\n    },\r\n    // 处理底图选择\r\n    handleBasemapChange (basemap) {\r\n      const basemapMapping = {\r\n        '天地图-矢量（球面墨卡托投影）': 'tianditu-vector',\r\n        '天地图-影像（球面墨卡托投影）': 'tianditu-image',\r\n        '天地图-地形（球面墨卡托投影）': 'tianditu-topography'\r\n      }\r\n      // 检查 basemap.title 是否是中文\r\n      if (basemapMapping[basemap.title]) {\r\n        this.BasemapName = basemapMapping[basemap.title]\r\n      } else {\r\n        this.BasemapName = basemap.title\r\n      }\r\n      const urlParams = new URLSearchParams(window.location.search)\r\n      urlParams.set('BasemapLayer', this.BasemapName)\r\n      window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\r\n    },\r\n    created () {\r\n      const BasemapLayer = this.$route.query.BasemapLayer\r\n      const basemapMapping = {\r\n        '天地图-矢量（球面墨卡托投影）': 'tianditu-vector',\r\n        '天地图-影像（球面墨卡托投影）': 'tianditu-image',\r\n        '天地图-地形（球面墨卡托投影）': 'tianditu-topography',\r\n        '天地图-矢量（含注记）（球面墨卡托投影）': 'tianditu-vector'\r\n      }\r\n\r\n      // 如果有底图参数，进行解析\r\n      if (BasemapLayer) {\r\n        // 检查 BasemapLayer 是否是中文\r\n        if (basemapMapping[BasemapLayer]) {\r\n          this.BasemapName = basemapMapping[BasemapLayer]\r\n        } else {\r\n          this.BasemapName = BasemapLayer\r\n        }\r\n      }\r\n    },\r\n    // 调整视图以适应起点和终点\r\n    adjustView () {\r\n      if (this.selectedResultStart && this.selectedResultEnd) {\r\n        const padding = 0.01 // 调整这个值以增加或减少边界的放宽程度\r\n        const extent = new Extent({\r\n          xmin: Math.min(this.selectedResultStart.location[0], this.selectedResultEnd.location[0]) - 10 * padding,\r\n          ymin: Math.min(this.selectedResultStart.location[1], this.selectedResultEnd.location[1]) - 10 * padding,\r\n          xmax: Math.max(this.selectedResultStart.location[0], this.selectedResultEnd.location[0]) + 10 * padding,\r\n          ymax: Math.max(this.selectedResultStart.location[1], this.selectedResultEnd.location[1]) + 10 * padding\r\n        })\r\n        this.view.goTo(extent).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      } else if (this.selectedResultStart) {\r\n        this.view.goTo({\r\n          center: [this.selectedResultStart.location[0], this.selectedResultStart.location[1]],\r\n          zoom: 10\r\n        }).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      } else if (this.selectedResultEnd) {\r\n        this.view.goTo({\r\n          center: [this.selectedResultEnd.location[0], this.selectedResultEnd.location[1]],\r\n          zoom: 10\r\n        }).catch((err) => {\r\n          console.error('Error adjusting view:', err)\r\n        })\r\n      }\r\n    },\r\n    drawPoints (graphicsLayer) {\r\n      // 检查this.$route.query.start和this.$route.query.end是否定义\r\n      if (!this.$route.query.start || !this.$route.query.end) {\r\n        console.error('Start or end point is undefined.')\r\n        return // 如果未定义，直接返回\r\n      }\r\n      const start = JSON.parse(this.$route.query.start)\r\n      const end = JSON.parse(this.$route.query.end)\r\n      // 检查start和end是否有location属性\r\n      if (!start.location || !end.location) {\r\n        console.error('Start or end point does not have a location.')\r\n        return // 如果没有location属性，直接返回\r\n      }\r\n      // 创建起点和终点的Point对象\r\n      const startPoint = new Point({\r\n        longitude: start.location[0],\r\n        latitude: start.location[1]\r\n      })\r\n      const endPoint = new Point({\r\n        longitude: end.location[0],\r\n        latitude: end.location[1]\r\n      })\r\n      const startGraphic = new Graphic({\r\n        geometry: startPoint,\r\n        title: '起点',\r\n        symbol: {\r\n          type: 'simple-marker', // autocasts as new SimpleMarkerSymbol()\r\n          color: 'red',\r\n          size: '20px'\r\n        },\r\n        // 添加popupTemplate\r\n        popupTemplate: {\r\n          title: '起点信息',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [\r\n                {\r\n                  fieldName: 'address',\r\n                  label: '地址'\r\n                },\r\n                {\r\n                  fieldName: 'name',\r\n                  label: '名称'\r\n                },\r\n                // 可以继续添加更多字段\r\n                {\r\n                  fieldName: 'wgs84_latitude',\r\n                  label: 'WGS84纬度'\r\n                },\r\n                {\r\n                  fieldName: 'wgs84_longitude',\r\n                  label: 'WGS84经度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_index',\r\n                  label: '百度索引'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_latitude',\r\n                  label: '百度纬度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_longitude',\r\n                  label: '百度经度'\r\n                },\r\n                {\r\n                  fieldName: 'id',\r\n                  label: 'ID'\r\n                },\r\n                {\r\n                  fieldName: 'label',\r\n                  label: '标签'\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        attributes: start\r\n      })\r\n      const endGraphic = new Graphic({\r\n        geometry: endPoint,\r\n        title: '终点',\r\n        symbol: {\r\n          type: 'simple-marker',\r\n          color: 'green',\r\n          size: '20px'\r\n        },\r\n        // 添加popupTemplate\r\n        popupTemplate: {\r\n          title: '终点信息',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [\r\n                {\r\n                  fieldName: 'address',\r\n                  label: '地址'\r\n                },\r\n                {\r\n                  fieldName: 'name',\r\n                  label: '名称'\r\n                },\r\n                // 可以继续添加更多字段\r\n                {\r\n                  fieldName: 'wgs84_latitude',\r\n                  label: 'WGS84纬度'\r\n                },\r\n                {\r\n                  fieldName: 'wgs84_longitude',\r\n                  label: 'WGS84经度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_index',\r\n                  label: '百度索引'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_latitude',\r\n                  label: '百度纬度'\r\n                },\r\n                {\r\n                  fieldName: 'baidu_longitude',\r\n                  label: '百度经度'\r\n                },\r\n                {\r\n                  fieldName: 'id',\r\n                  label: 'ID'\r\n                },\r\n                {\r\n                  fieldName: 'label',\r\n                  label: '标签'\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        attributes: end\r\n      })\r\n      // 将起点和终点添加到图形图层\r\n      graphicsLayer.addMany([startGraphic, endGraphic])\r\n    },\r\n    drawRoutes (map) {\r\n      const defaultRouteId = this.$route.query.default_id // 从URL获取默认路线ID\r\n      const timeBasedRouteId = this.$route.query.time_based_id // 从URL获取基于时间的路线ID\r\n\r\n      if (!defaultRouteId && !timeBasedRouteId) {\r\n        console.error('Route IDs are undefined.')\r\n        return\r\n      }\r\n      if (defaultRouteId) {\r\n        this.fetchAndDrawRoute(map, defaultRouteId, [25, 202, 173], true) // 绿色，耗时少路径\r\n      }\r\n      if (timeBasedRouteId) {\r\n        this.fetchAndDrawRoute(map, timeBasedRouteId, [244, 96, 108]) // 红色，无眩光路径\r\n      }\r\n    },\r\n    fetchAndDrawRoute (map, routeId, color, isNoGlareRoute = false) {\r\n      const geojsonUrl = `${process.env.VUE_APP_API_URL}/api/get_geojson/${routeId}`\r\n      fetch(geojsonUrl) // 使用fetch API获取GeoJSON文件\r\n        .then(response => response.json()) // 将响应转换为JSON\r\n        .then(data => {\r\n          let totalLength = 0\r\n          let totalCost = 0\r\n          const roadLengths = {}\r\n\r\n          const features = data.features.map((feature, index) => {\r\n            if (feature.properties.cost !== 99999) {\r\n              totalLength += feature.properties.length\r\n              totalCost += feature.properties.cost\r\n            }\r\n            if (!feature.properties.name.includes('未知')) {\r\n              if (!roadLengths[feature.properties.name]) {\r\n                roadLengths[feature.properties.name] = { length: 0, order: index }\r\n              }\r\n              roadLengths[feature.properties.name].length += feature.properties.length\r\n            }\r\n            return {\r\n              geometry: {\r\n                type: 'polyline',\r\n                paths: feature.geometry.coordinates\r\n              },\r\n              attributes: {\r\n                ...feature.properties,\r\n                id: index, // 为每个要素生成唯一的ID\r\n                routeType: isNoGlareRoute ? '耗时少路径' : '无眩光路径' // 添加路线类型\r\n              }\r\n            }\r\n          })\r\n          const sortedRoads = Object.entries(roadLengths)\r\n            .sort((a, b) => b[1].length - a[1].length || a[1].order - b[1].order)\r\n          const topPassRoads = sortedRoads.slice(0, 3).map(road => road[0]).join('->')\r\n\r\n          const geojsonLayer = new FeatureLayer({ // 创建FeatureLayer图层\r\n            title: isNoGlareRoute ? '耗时少路径' : '无眩光路径',\r\n            source: features,\r\n            renderer: {\r\n              type: 'simple', // 使用简单渲染器\r\n              title: isNoGlareRoute ? '耗时少路径' : '无眩光路径',\r\n              symbol: {\r\n                type: 'simple-line', // 使用简单线符号\r\n                color: color, // 使用传入的颜色\r\n                width: isNoGlareRoute ? 4.5 : 3 // 根据是否为无眩光路径设置宽度\r\n              }\r\n            },\r\n            objectIdField: 'id', // 必须指定一个唯一的字段作为ObjectId\r\n            fields: [\r\n              { name: 'id', type: 'oid' },\r\n              { name: 'seq', type: 'integer' },\r\n              { name: 'path_seq', type: 'integer' },\r\n              { name: 'node', type: 'integer' },\r\n              { name: 'edge', type: 'integer' },\r\n              { name: 'cost', type: 'double' },\r\n              { name: 'agg_cost', type: 'double' },\r\n              { name: 'length', type: 'double' },\r\n              { name: 'name', type: 'string' },\r\n              { name: 'maxspeed', type: 'integer' },\r\n              { name: 'routeType', type: 'string' } // 添加routeType字段\r\n            ],\r\n            popupTemplate: {\r\n              title: '{routeType} - {name}', // 显示路线类型和路名\r\n              content: [\r\n                {\r\n                  type: 'text',\r\n                  text: `总距离: ${(totalLength / 1000).toFixed(2)} km<br>总耗时: ${(totalCost / 3600).toFixed(2)} 小时`\r\n                },\r\n                {\r\n                  type: 'fields',\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: 'length',\r\n                      label: '长度（米）'\r\n                    },\r\n                    {\r\n                      fieldName: 'cost',\r\n                      label: '耗时（秒）'\r\n                    },\r\n                    {\r\n                      fieldName: 'maxspeed',\r\n                      label: '最大速度'\r\n                    },\r\n                    {\r\n                      fieldName: 'name',\r\n                      label: '名称'\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            }\r\n          })\r\n          const rawGeojsonLayer = markRaw(geojsonLayer)\r\n          map.layers.add(rawGeojsonLayer)\r\n          if (totalCost < 3600) {\r\n            totalCost += 60\r\n          }\r\n          const hours = Math.floor(totalCost / 3600)\r\n          const minutes = Math.floor((totalCost % 3600) / 60)\r\n          let distance\r\n          if (totalLength < 1000) {\r\n            distance = `${totalLength.toFixed(2)}米`\r\n          } else {\r\n            distance = `${(totalLength / 1000).toFixed(2)}千米`\r\n          }\r\n          // 根据是否为无眩光路径来存储结果\r\n          if (isNoGlareRoute) {\r\n            this.noGlareTotalHours = hours\r\n            this.noGlareTotalMinutes = minutes\r\n            this.noGlareTotalDistance = distance\r\n            this.noGlareTotalPass = topPassRoads\r\n            this.routeLayers.noGlareRouteId = geojsonLayer\r\n          } else {\r\n            this.totalHours = hours\r\n            this.totalMinutes = minutes\r\n            this.totalDistance = distance\r\n            this.totalPass = topPassRoads\r\n            this.routeLayers.defaultRouteId = geojsonLayer\r\n          }\r\n        })\r\n        .catch(error => console.error('Error loading the geojson file:', error))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style src=\"@/assets/share_css/routeplanning.css\">\r\n\r\n</style>\r\n","import { render } from \"./RouteViewsw.vue?vue&type=template&id=81ff46d0\"\nimport script from \"./RouteViewsw.vue?vue&type=script&lang=js\"\nexport * from \"./RouteViewsw.vue?vue&type=script&lang=js\"\n\nimport \"@/assets/share_css/routeplanning.css?vue&type=style&index=0&lang=css&external\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","key","ref","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","src","_imports_0","_hoisted_4","onClick","_cache","args","$options","swap","title","require","alt","_hoisted_5","_hoisted_6","_imports_1","type","$event","$data","searchQueryStart","onInput","onSearchInputChange","placeholder","_hoisted_7","clc1","_imports_2","searchResults","length","_hoisted_8","_renderList","result","index","_normalizeClass","highlightedIndex","selectResult","name","_hoisted_9","_createCommentVNode","_hoisted_10","_imports_3","searchQueryEnd","_hoisted_11","clc2","searchResultsEnd","_hoisted_12","_hoisted_13","onSearch","_hoisted_14","isLoading","_hoisted_15","id","ismaploading","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","for","selectedDate","min","minDate","max","maxDate","isDateDisabled","onChange","handleDateChange","_hoisted_20","formattedTime","onTimeInputChange","step","_createVNode","_Transition","default","_withCtx","_hoisted_21","_hoisted_22","highlightRoute","style","_normalizeStyle","color","getColor","_hoisted_23","_toDisplayString","totalHours","totalMinutes","_createTextVNode","totalDistance","_hoisted_24","totalPass","_hoisted_25","noGlareTotalHours","noGlareTotalMinutes","noGlareTotalDistance","_hoisted_26","noGlareTotalPass","toggleRouteList","isRouteListVisible","_","data","selectedResultStart","selectedResultEnd","selectedTime","highlightedRouteId","routeLayers","blinkingTimers","highlightedColor","highlightedBlinkColor","noGlareColor","defaultColor","noGlareRouteId","defaultRouteId","BasemapName","mounted","this","created","initMap","$route","query","start","end","JSON","parse","parseUrlParams","window","addEventListener","handleKeydown","beforeUnmount","removeEventListener","computed","hours","minutes","split","map","Number","roundedMinutes","Math","floor","String","padStart","methods","routeId","event","date","updateTime","isStart","Promise","resolve","reject","startWithLocation","location","wgs84_longitude","wgs84_latitude","endWithLocation","axios","post","time","then","response","defaultRoutePlanId","default_id","timeBasedRoutePlanId","time_based_id","$router","push","path","stringify","BasemapLayer","catch","error","console","alert","Error","basemapName","Map","basemap","view","MapView","container","center","zoom","constraints","geometry","xmin","ymin","xmax","ymax","minScale","maxScale","rotationEnabled","snapToZoom","basemapGallery","BasemapGallery","source","watch","newBasemap","handleBasemapChange","compass","Compass","scaleBar","ScaleBar","unit","distanceMeasurement2D","DistanceMeasurement2D","unitOptions","metric","nonMetric","iconClass","layerList","LayerList","ui","add","position","move","graphicsLayer","GraphicsLayer","featureLayer","FeatureLayer","url","renderer","symbol","outline","width","popupTemplate","content","fieldInfos","fieldName","label","when","drawPoints","adjustView","drawRoutes","err","basemapMapping","urlParams","URLSearchParams","search","set","history","replaceState","pathname","padding","extent","Extent","goTo","startPoint","Point","longitude","latitude","endPoint","startGraphic","Graphic","size","attributes","endGraphic","addMany","timeBasedRouteId","fetchAndDrawRoute","isNoGlareRoute","geojsonUrl","fetch","json","totalLength","totalCost","roadLengths","features","feature","properties","cost","includes","order","paths","coordinates","routeType","sortedRoads","Object","entries","sort","a","b","topPassRoads","slice","road","join","geojsonLayer","objectIdField","fields","text","toFixed","rawGeojsonLayer","markRaw","layers","distance","__exports__","render"],"sourceRoot":""}