{"version":3,"file":"js/1324.0cdc2e2c.js","mappings":"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","sources":["webpack://sun-glare-project/./src/assets/share_js/routeplanning_all.js","webpack://sun-glare-project/./src/assets/share_js/routeview_public.js"],"sourcesContent":["// routeplanning_all.js\r\nimport { nextTick } from 'vue'\r\n\r\n/**\r\n * Handles keydown events for search result navigation and selection.\r\n *\r\n * @param {Object} context - The context object containing search results and query information.\r\n * @param {Event} event - The keydown event object.\r\n */\r\nexport function handleKeydown (context, event) {\r\n  if (context.searchResults.length && context.searchQueryStart) {\r\n    switch (event.key) {\r\n      case 'Escape':\r\n        context.searchResults = []\r\n        break\r\n      case 'Tab':\r\n        event.preventDefault()\r\n        context.highlightedIndex = (context.highlightedIndex + 1) % context.searchResults.length\r\n        nextTick(() => {\r\n          const highlightedElement = context.$refs.searchResultsStart.querySelector('li.highlighted')\r\n          if (highlightedElement) {\r\n            highlightedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' })\r\n          }\r\n        })\r\n        break\r\n      case 'Enter':\r\n        if (context.highlightedIndex >= 0 && context.highlightedIndex < context.searchResults.length) {\r\n          context.selectResult(context.searchResults[context.highlightedIndex], true)\r\n        }\r\n        break\r\n    }\r\n  } else if (context.searchResultsEnd.length && context.searchQueryEnd) {\r\n    switch (event.key) {\r\n      case 'Escape':\r\n        context.searchResultsEnd = []\r\n        break\r\n      case 'Tab':\r\n        event.preventDefault()\r\n        context.highlightedIndex = (context.highlightedIndex + 1) % context.searchResultsEnd.length\r\n        nextTick(() => {\r\n          const highlightedElement = context.$refs.searchResultsEnd.querySelector('li.highlighted')\r\n          if (highlightedElement) {\r\n            highlightedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' })\r\n          }\r\n        })\r\n        break\r\n      case 'Enter':\r\n        if (context.highlightedIndex >= 0 && context.highlightedIndex < context.searchResultsEnd.length) {\r\n          context.selectResult(context.searchResultsEnd[context.highlightedIndex], false)\r\n        }\r\n        break\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Updates the selected time in the given context to the current time.\r\n *\r\n * This function checks if the selected time in the context is the current time.\r\n * If it is, or if the time is not from the URL, it updates the selected time to the current time.\r\n * It also resets the `isTimeFromUrl` flag to false.\r\n *\r\n * @param {Object} context - The context object containing time-related properties.\r\n * @param {boolean} context.isTimeFromUrl - Flag indicating if the time is from the URL.\r\n * @param {string} context.selectedTime - The currently selected time in the context.\r\n */\r\nexport function updateTime (context) {\r\n  const now = new Date()\r\n  const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`\r\n  // 只有当 selectedTime 是当前时间时，才更新\r\n  if (!context.isTimeFromUrl || context.selectedTime === currentTime) {\r\n    context.selectedTime = currentTime\r\n    context.isTimeFromUrl = false // 重置标志位\r\n  }\r\n}\r\n\r\n/**\r\n * Clears the search query in the search box 1.\r\n *\r\n * @param {Object} context - The context object containing the search query.\r\n * @param {string} context.searchQueryStart - The search query to be cleared.\r\n */\r\nexport function clc1 (context) {\r\n  // Clear the search box 1\r\n  context.searchQueryStart = '' // Set search query to an empty string\r\n}\r\n\r\n/**\r\n * Clears the search query in the provided context.\r\n *\r\n * @param {Object} context - The context object containing the search query.\r\n * @param {string} context.searchQueryEnd - The search query to be cleared.\r\n */\r\nexport function clc2 (context) {\r\n  // 清空搜索框2\r\n  context.searchQueryEnd = ''\r\n}\r\n\r\n/**\r\n * Determines if a given date is disabled based on specific conditions.\r\n *\r\n * @param {Object} context - The context in which the function is called.\r\n * @param {string|Date} date - The date to be checked, can be a string or Date object.\r\n * @returns {boolean} - Returns true if the date is disabled, otherwise false.\r\n */\r\nexport function isDateDisabled (context, date) {\r\n  if (!date) return false // Return false if no date is provided\r\n  const selected = new Date(date) // Convert the date to a Date object\r\n  const month = selected.getMonth() + 1 // Get the month (1-12)\r\n  const day = selected.getDate() // Get the day of the month (1-31)\r\n  if (month >= 1 && month <= 7 && day !== 15) { // Check if the date is between January and July and not the 15th\r\n    return true\r\n  }\r\n  if (month === 8 && day <= 25) { // Check if the date is in August and on or before the 25th\r\n    return true\r\n  }\r\n  if ((month === 10 || month === 12) && day !== 15) { // Check if the date is in October or December and not the 15th\r\n    return true\r\n  }\r\n  if (month === 11 && day >= 9) { // Check if the date is in November and on or after the 9th\r\n    return true\r\n  }\r\n  return false // Return false if none of the conditions are met\r\n}\r\n\r\n/**\r\n * Handles the change of date in the context.\r\n *\r\n * @param {Object} context - The context in which the date change is handled.\r\n * @param {Event} event - The event object containing the new date value.\r\n */\r\nexport function handleDateChange (context, event) {\r\n  const date = event.target.value // Get the selected date from the event\r\n  if (isDateDisabled(context, date)) { // Check if the selected date is disabled\r\n    alert('抱歉，选择的日期未进行模拟，请选择其他日期。可选日期为，9月1日-9月30日，11月1日到9日，以及其他月份的15日.') // Show alert if date is disabled\r\n    context.selectedDate = '' // Reset the selected date in the context\r\n  }\r\n}\r\n\r\n/**\r\n * Handles the change event for a time input field.\r\n *\r\n * @param {Object} context - The context object where the selected time will be set.\r\n * @param {Event} event - The event object from the time input field.\r\n */\r\nexport function onTimeInputChange (context, event) {\r\n  const value = event.target.value // Get the value from the input field\r\n  const [hours, minutes] = value.split(':').map(Number) // Split the value into hours and minutes\r\n  const roundedMinutes = Math.floor(minutes / 10) * 10 // Round the minutes to the nearest 10\r\n  context.selectedTime = `${String(hours).padStart(2, '0')}:${String(roundedMinutes).padStart(2, '0')}` // Set the selected time in the context\r\n}\r\n\r\n/**\r\n * Handles the input change event for search fields and updates search results.\r\n *\r\n * @param {Object} context - The context object containing the search results fields.\r\n * @param {Event} event - The input change event.\r\n * @param {boolean} isStart - A flag indicating whether the search is for the start or end location.\r\n */\r\nexport function onSearchInputChange (context, event, isStart) {\r\n  const query = event.target.value // Get the input value from the event\r\n  const searchResultsField = isStart ? 'searchResults' : 'searchResultsEnd' // Determine which search results field to update\r\n  if (query.includes(\"'\")) { // Return if the query contains a single quote\r\n    return\r\n  }\r\n  if (query.length >= 2) { // Proceed if the query length is at least 2 characters\r\n    fetch(`${process.env.VUE_APP_API_URL}/api/search`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'ngrok-skip-browser-warning': 'true'\r\n      },\r\n      body: JSON.stringify({ searchQueryStart: query }) // Send the query in the request body\r\n    })\r\n      .then(response => response.json()) // Parse the response as JSON\r\n      .then(data => {\r\n        context[searchResultsField] = data // Update the context with the search results\r\n      })\r\n      .catch((error) => {\r\n        console.error('错误:', error) // Log any errors\r\n      })\r\n  } else {\r\n    context[searchResultsField] = [] // Clear the search results if the query is too short\r\n  }\r\n}\r\n","// routeview_public.js\r\n/**\r\n * Parses URL parameters and updates the context object with the parsed values.\r\n *\r\n * @param {Object} context - The context object to be updated with parsed URL parameters.\r\n * @property {string} context.searchQueryStart - The start location name parsed from the URL.\r\n * @property {string} context.searchQueryEnd - The end location name parsed from the URL.\r\n * @property {string} context.selectedDate - The selected date parsed from the URL.\r\n * @property {string} context.selectedTime - The selected time parsed from the URL.\r\n * @property {boolean} context.isTimeFromUrl - Flag indicating if the time was parsed from the URL.\r\n * @property {string} context.defaultRouteId - The default route ID parsed from the URL.\r\n * @property {string} context.timeBasedRouteId - The time-based route ID parsed from the URL.\r\n * @property {Function} context.created - Function to be called after parsing URL parameters.\r\n */\r\nexport function parseUrlParams (context) {\r\n  const urlParams = new URLSearchParams(window.location.search)\r\n  const startParam = urlParams.get('start')\r\n  const endParam = urlParams.get('end')\r\n  const dateParam = urlParams.get('date')\r\n  const timeParam = urlParams.get('time')\r\n  const defaultRouteIdParam = urlParams.get('default_id')\r\n  const timeBasedRouteIdParam = urlParams.get('time_based_id')\r\n  if (startParam) {\r\n    try {\r\n      const startObj = JSON.parse(decodeURIComponent(startParam))\r\n      if (startObj && startObj.address) {\r\n        context.searchQueryStart = startObj.name\r\n      }\r\n    } catch (e) {\r\n      console.error('Error parsing start parameter:', e)\r\n    }\r\n  }\r\n  if (endParam) { // 如果有终点参数，进行解析\r\n    try {\r\n      const endObj = JSON.parse(decodeURIComponent(endParam))\r\n      if (endObj && endObj.address) {\r\n        context.searchQueryEnd = endObj.name // 绑定终点查询字符串\r\n      }\r\n    } catch (e) {\r\n      console.error('Error parsing end parameter:', e)\r\n    }\r\n  }\r\n  // 如果有日期参数，进行解析\r\n  if (dateParam) {\r\n    context.selectedDate = dateParam\r\n  }\r\n  // 如果有时间参数，进行解析\r\n  if (timeParam) {\r\n    context.selectedTime = timeParam\r\n    context.isTimeFromUrl = true // 设置标志位\r\n  }\r\n  // 如果有默认路径ID参数，进行解析\r\n  if (defaultRouteIdParam) {\r\n    context.defaultRouteId = defaultRouteIdParam\r\n  }\r\n  // 如果有基于时间的路径ID参数，进行解析\r\n  if (timeBasedRouteIdParam) {\r\n    context.timeBasedRouteId = timeBasedRouteIdParam\r\n  }\r\n\r\n  // 如果有底图参数，进行解析\r\n  context.created()\r\n}\r\n\r\n/**\r\n * Toggles the visibility of the route list in the given context.\r\n *\r\n * @param {Object} context - The context object containing the state.\r\n * @param {boolean} context.isRouteListVisible - The current visibility state of the route list.\r\n */\r\nexport function toggleRouteList (context) {\r\n  context.isRouteListVisible = !context.isRouteListVisible // Toggle the visibility state\r\n}\r\n\r\n/**\r\n * Returns a color based on the provided index.\r\n *\r\n * @param {number} index - The index to determine the color.\r\n * @returns {string} The color corresponding to the index.\r\n */\r\nexport function getColor (index) {\r\n  if (index === 0) {\r\n    return 'rgb(25, 202, 173)' // 绿色，耗时少路径\r\n  } else if (index === 1) {\r\n    return 'rgb(244, 96, 108)' // 红色，无眩光路径\r\n  }\r\n  return 'black' // 默认颜色\r\n}\r\n\r\n/**\r\n * Highlights a route on the map by changing its style and starting a blinking effect.\r\n *\r\n * @param {Object} context - The context object containing route layers and other configurations.\r\n * @param {string} routeId - The ID of the route to be highlighted.\r\n */\r\nexport function highlightRoute (context, routeId) {\r\n  routeId = routeId === 'defaultRouteId' ? 'noGlareRouteId' : 'defaultRouteId' // Toggle routeId between 'defaultRouteId' and 'noGlareRouteId'\r\n  if (context.highlightedRouteId && context.highlightedRouteId !== routeId) {\r\n    resetRouteStyle(context, context.highlightedRouteId) // Reset the style of the previously highlighted route\r\n  }\r\n  if (context.blinkingTimers[routeId]) {\r\n    clearInterval(context.blinkingTimers[routeId]) // Clear the blinking timer for the route\r\n    delete context.blinkingTimers[routeId] // Remove the blinking timer from the context\r\n    resetRouteStyle(context, routeId) // Reset the style of the route\r\n  }\r\n  const layer = context.routeLayers[routeId] // Get the layer for the route\r\n  if (layer) {\r\n    const color = context.highlightedColor // Get the highlight color from the context\r\n    const newRenderer = {\r\n      type: 'simple',\r\n      title: '路径', // Title for the renderer\r\n      symbol: {\r\n        type: 'simple-line',\r\n        color: color, // Set the color for the route\r\n        width: 5 // Set the width for the route\r\n      }\r\n    }\r\n    layer.renderer = newRenderer // Apply the new renderer to the layer\r\n  }\r\n  context.highlightedRouteId = routeId // Update the highlighted route ID in the context\r\n  startBlinking(context, routeId) // Start the blinking effect for the route\r\n}\r\n\r\n/**\r\n * Starts the blinking effect on a specified route layer.\r\n *\r\n * @param {Object} context - The context object containing route layers and other configurations.\r\n * @param {string} routeId - The ID of the route to apply the blinking effect.\r\n */\r\nexport function startBlinking (context, routeId) {\r\n  const layer = context.routeLayers[routeId] // Get the route layer by routeId\r\n  if (!layer) return\r\n\r\n  let isBlinkOn = false\r\n  const originalColor = routeId === context.noGlareRouteId ? context.noGlareColor : context.defaultColor // Determine the original color of the route\r\n\r\n  const intervalId = setInterval(() => {\r\n    isBlinkOn = !isBlinkOn\r\n    const color = isBlinkOn ? context.highlightedColor : context.highlightedBlinkColor // Toggle between highlighted and blink colors\r\n    const newRenderer = {\r\n      type: 'simple',\r\n      title: '路径',\r\n      symbol: {\r\n        type: 'simple-line',\r\n        color: color,\r\n        width: 4.5\r\n      }\r\n    }\r\n    layer.renderer = newRenderer // Apply the new renderer to the layer\r\n  }, 300)\r\n\r\n  context.blinkingTimers[routeId] = intervalId // Store the interval ID in the context\r\n\r\n  setTimeout(() => {\r\n    clearInterval(context.blinkingTimers[routeId]) // Stop the blinking effect\r\n    delete context.blinkingTimers[routeId] // Remove the interval ID from the context\r\n    const finalRenderer = {\r\n      type: 'simple',\r\n      title: '路径',\r\n      symbol: {\r\n        type: 'simple-line',\r\n        color: context.highlightedColor,\r\n        width: 4.5\r\n      }\r\n    }\r\n    layer.renderer = finalRenderer // Apply the final renderer to the layer\r\n    setTimeout(() => {\r\n      resetRouteStyle(context, routeId, originalColor) // Reset the route style to its original color\r\n    }, 3000)\r\n  }, 3000)\r\n}\r\n\r\n/**\r\n * Resets the style of a route in the given context.\r\n *\r\n * @param {Object} context - The context containing route layers and blinking timers.\r\n * @param {string} routeId - The ID of the route to reset.\r\n * @param {string|null} [originalColor=null] - The original color to reset to (optional).\r\n */\r\nexport function resetRouteStyle (context, routeId, originalColor = null) {\r\n  if (context.blinkingTimers[routeId]) {\r\n    clearInterval(context.blinkingTimers[routeId]) // Clear the blinking timer if it exists\r\n    delete context.blinkingTimers[routeId] // Remove the blinking timer from the context\r\n  }\r\n  const layer = context.routeLayers[routeId]\r\n  if (layer) {\r\n    const isNoGlare = routeId === context.noGlareRouteId // Check if the route has no glare\r\n    const color = (isNoGlare ? context.defaultColor : context.noGlareColor) // Determine the color based on glare status\r\n    const newRenderer = {\r\n      type: 'simple',\r\n      title: '路径', // Title for the renderer\r\n      symbol: {\r\n        type: 'simple-line',\r\n        color: color, // Set the color for the route\r\n        width: isNoGlare ? 4.5 : 3 // Set the width based on glare status\r\n      }\r\n    }\r\n    layer.renderer = newRenderer // Apply the new renderer to the layer\r\n  }\r\n}\r\n\r\n/**\r\n * Selects a result and updates the context with the selected result.\r\n *\r\n * @param {Object} context - The context object containing the state.\r\n * @param {Object} result - The result object to be selected.\r\n * @param {boolean} [isStart=true] - Flag indicating if the result is the start point.\r\n */\r\nexport function selectResult (context, result, isStart = true) {\r\n  const simplifiedResult = {\r\n    name: result.name,\r\n    address: result.address,\r\n    wgs84_latitude: result.wgs84_latitude,\r\n    wgs84_longitude: result.wgs84_longitude,\r\n    location: [result.wgs84_longitude, result.wgs84_latitude],\r\n    baidu_index: result.baidu_index,\r\n    baidu_latitude: result.baidu_latitude,\r\n    baidu_longitude: result.baidu_longitude,\r\n    id: result.id,\r\n    label: result.label\r\n  }\r\n  let currentStart = context.selectedResultStart ? JSON.stringify(context.selectedResultStart) : null\r\n  let currentEnd = context.selectedResultEnd ? JSON.stringify(context.selectedResultEnd) : null\r\n  if (isStart) {\r\n    context.selectedResultStart = simplifiedResult\r\n    context.searchQueryStart = simplifiedResult.name\r\n    context.searchResults = []\r\n    currentStart = JSON.stringify(simplifiedResult)\r\n  } else {\r\n    context.selectedResultEnd = simplifiedResult\r\n    context.searchQueryEnd = simplifiedResult.name\r\n    context.searchResultsEnd = []\r\n    currentEnd = JSON.stringify(simplifiedResult)\r\n  }\r\n  context.$router.push({\r\n    path: '/lu-jing-gui-hua/Intermediate-page',\r\n    query: {\r\n      start: currentStart,\r\n      end: currentEnd,\r\n      date: context.selectedDate,\r\n      time: context.selectedTime,\r\n      BasemapLayer: context.BasemapName\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Swaps the search queries and selected results in the given context, then re-executes the search.\r\n *\r\n * @param {Object} context - The context object containing search queries and results.\r\n * @param {boolean} context.isSwapping - Flag indicating if a swap is in progress.\r\n * @param {Object} context.searchQueryStart - The starting search query.\r\n * @param {Object} context.searchQueryEnd - The ending search query.\r\n * @param {Object} context.selectedResultStart - The starting selected result.\r\n * @param {Object} context.selectedResultEnd - The ending selected result.\r\n * @param {Function} context.onSearch - Function to execute the search.\r\n * @param {Function} context.initMap - Function to initialize the map.\r\n */\r\nexport function swap (context) {\r\n  context.isSwapping = true // 设置标志位\r\n  // 交换 searchQueryStart 和 searchQueryEnd\r\n  const tempQuery = context.searchQueryStart\r\n  context.searchQueryStart = context.searchQueryEnd\r\n  context.searchQueryEnd = tempQuery\r\n  // 交换 selectedResultStart 和 selectedResultEnd\r\n  const tempResult = context.selectedResultStart\r\n  context.selectedResultStart = context.selectedResultEnd\r\n  context.selectedResultEnd = tempResult\r\n  // 调用 onSearch 方法重新查询路径\r\n  context.onSearch().then(() => {\r\n    parseUrlParams(context)\r\n    context.initMap()\r\n    // 确保在交换操作完成后，更新搜索框的值\r\n    context.searchQueryStart = context.selectedResultStart.name\r\n    context.searchQueryEnd = context.selectedResultEnd.name\r\n    context.isSwapping = false // 重置标志位\r\n  }).catch(() => {\r\n    context.isSwapping = false // 确保在错误情况下也重置标志位\r\n  })\r\n}\r\n"],"names":["handleKeydown","context","event","searchResults","length","searchQueryStart","key","preventDefault","highlightedIndex","nextTick","highlightedElement","$refs","searchResultsStart","querySelector","scrollIntoView","block","behavior","selectResult","searchResultsEnd","searchQueryEnd","updateTime","now","Date","currentTime","String","getHours","padStart","getMinutes","isTimeFromUrl","selectedTime","clc1","clc2","isDateDisabled","date","selected","month","getMonth","day","getDate","handleDateChange","target","value","alert","selectedDate","onTimeInputChange","hours","minutes","split","map","Number","roundedMinutes","Math","floor","onSearchInputChange","isStart","query","searchResultsField","includes","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","parseUrlParams","urlParams","URLSearchParams","window","location","search","startParam","get","endParam","dateParam","timeParam","defaultRouteIdParam","timeBasedRouteIdParam","startObj","parse","decodeURIComponent","address","name","e","endObj","defaultRouteId","timeBasedRouteId","created","toggleRouteList","isRouteListVisible","getColor","index","highlightRoute","routeId","highlightedRouteId","resetRouteStyle","blinkingTimers","clearInterval","layer","routeLayers","color","highlightedColor","newRenderer","type","title","symbol","width","renderer","startBlinking","isBlinkOn","originalColor","noGlareRouteId","noGlareColor","defaultColor","intervalId","setInterval","highlightedBlinkColor","setTimeout","finalRenderer","isNoGlare","result","simplifiedResult","wgs84_latitude","wgs84_longitude","baidu_index","baidu_latitude","baidu_longitude","id","label","currentStart","selectedResultStart","currentEnd","selectedResultEnd","$router","push","path","start","end","time","BasemapLayer","BasemapName","swap","isSwapping","tempQuery","tempResult","onSearch","initMap"],"sourceRoot":""}